// public/js/resources-page.js
// –í–µ—Å—å JS-–∫–æ–¥ –∏–∑ <script> –±–ª–æ–∫–∞ resources.html –≤—ã–Ω–µ—Å–µ–Ω —Å—é–¥–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ CSP

let currentResources = [];
let currentResourceId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', function() {
    checkAuth();
    loadSubjectsFilter();
    loadResources();

    // –ü–æ–∏—Å–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
    document.getElementById('searchInput').addEventListener('input', () => {
        setTimeout(() => {
            const filtered = getFilteredResources();
            displayResources(filtered);
        }, 300);
    });

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ–ª–µ–∫—Ç–æ–≤
    document.getElementById('subjectFilter').addEventListener('change', () => {
        const filtered = getFilteredResources();
        displayResources(filtered);
    });

    document.getElementById('typeFilter').addEventListener('change', () => {
        const filtered = getFilteredResources();
        displayResources(filtered);
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ ESC
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && document.getElementById('articleModal').style.display === 'flex') {
            closeArticleModal();
        }
    });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
async function loadSubjectsFilter() {
    try {
        const token = localStorage.getItem('token');
        const response = await fetch('/api/tests/subjects', {
            headers: { 'Authorization': `Bearer ${token}` }
        });

        if (response.ok) {
            const subjects = await response.json();
            const select = document.getElementById('subjectFilter');
            subjects.forEach(subject => {
                const option = document.createElement('option');
                option.value = subject.id;
                option.textContent = `${subject.icon || 'üìö'} ${subject.name}`;
                select.appendChild(option);
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
async function loadResources() {
    try {
        console.log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...');
        const container = document.getElementById('resourcesContainer');
        container.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">‚è≥</div>
                <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...</p>
            </div>
        `;
        const token = localStorage.getItem('token');
        const headers = token ? { 'Authorization': `Bearer ${token}` } : {};
        const response = await fetch('/api/resources', { headers });
        if (response.ok) {
            const resources = await response.json();
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤:', resources.length);
            currentResources = resources;
            await loadFavoriteStatuses(resources);
            displayResources(resources);
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
        document.getElementById('resourcesContainer').innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 3rem;">
                <div style="font-size: 3rem; margin-bottom: 1rem; color: #e74c3c;">‚ùå</div>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤</h3>
                <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</p>
                <button onclick="loadResources()" class="btn btn-primary">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑</button>
            </div>
        `;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
async function loadFavoriteStatuses(resources) {
    try {
        const token = localStorage.getItem('token');
        if (!token) return;
        const favoriteChecks = await Promise.all(
            resources.map(async (resource) => {
                try {
                    const response = await fetch(`/api/resources/favorite/check/${resource.id}`, {
                        headers: { 'Authorization': `Bearer ${token}` }
                    });
                    if (response.ok) {
                        const data = await response.json();
                        return { id: resource.id, isFavorite: data.isFavorite };
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞', resource.id, error);
                }
                return { id: resource.id, isFavorite: false };
            })
        );
        favoriteChecks.forEach(check => {
            const resource = resources.find(r => r.id === check.id);
            if (resource) {
                resource.is_favorite = check.isFavorite;
            }
        });
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
function displayResources(resources) {
    const container = document.getElementById('resourcesContainer');
    if (resources.length === 0) {
        container.innerHTML = `
            <div class="card" style="grid-column: 1 / -1; text-align: center; border-color: #ff9800;">
                <div class="card-body" style="padding: 3rem;">
                    <div style="font-size: 4rem; margin-bottom: 1rem;">üìö</div>
                    <h3>–†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é</p>
                    <button onclick="clearFilters()" class="btn btn-primary">üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
                </div>
            </div>
        `;
        return;
    }
    container.innerHTML = resources.map(resource => `
        <div class="card resource-card" onclick="openArticle(${resource.id})" style="cursor: pointer; transition: all 0.3s ease; border-left: 4px solid ${getResourceColor(resource.resource_type)};">
            <div class="card-header" style="position: relative; text-align: center; background: ${getResourceGradient(resource.resource_type)}; color: white; min-height: 120px; display: flex; flex-direction: column; justify-content: center;">
                ${resource.is_favorite ? '<div style="position: absolute; top: 0.5rem; right: 0.5rem; font-size: 1.2rem;">‚≠ê</div>' : ''}
                <div style="font-size: 3rem; margin-bottom: 0.5rem;">
                    ${getResourceIcon(resource.resource_type)}
                </div>
                <div style="font-size: 0.8rem; opacity: 0.9; font-weight: 600;">
                    ${getResourceTypeName(resource.resource_type)}
                </div>
            </div>
            <div class="card-body">
                <h3 class="card-title" style="font-size: 1.1rem; margin-bottom: 0.5rem; height: 2.5rem; overflow: hidden; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">
                    ${resource.title}
                </h3>
                <p style="color: var(--text-secondary); font-size: 0.9rem; margin-bottom: 1rem; height: 3rem; overflow: hidden; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">
                    ${resource.description || '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã'}
                </p>
                <div style="display: flex; justify-content: space-between; align-items: center; font-size: 0.8rem;">
                    <span style="color: var(--text-secondary); display: flex; align-items: center;">
                        <span style="margin-right: 0.25rem;">üëÅÔ∏è</span> ${resource.views_count || 0}
                    </span>
                    <div style="display: flex; gap: 0.5rem;">
                        ${resource.is_premium ? '<span style="color: #ff9800; font-weight: 600;">üíé –ü—Ä–µ–º–∏—É–º</span>' : ''}
                        <button onclick="event.stopPropagation(); toggleResourceFavorite(${resource.id})" 
                                style="background: none; border: none; font-size: 1.2rem; cursor: pointer; padding: 0;" 
                                title="${resource.is_favorite ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}">
                            ${resource.is_favorite ? '‚≠ê' : '‚òÜ'}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏")
function filterResources() {
    console.log('üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...');
    const filtered = getFilteredResources();
    displayResources(filtered);
    const subjectId = document.getElementById('subjectFilter').value;
    const type = document.getElementById('typeFilter').value;
    const search = document.getElementById('searchInput').value;
    console.log('üìä –§–∏–ª—å—Ç—Ä: –ø—Ä–µ–¥–º–µ—Ç=' + subjectId + ', —Ç–∏–ø=' + type + ', –ø–æ–∏—Å–∫=' + search + ', —Ä–µ–∑—É–ª—å—Ç–∞—Ç=' + filtered.length);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ç—å–∏
async function openArticle(resourceId) {
    try {
        currentResourceId = resourceId;
        const resource = currentResources.find(r => r.id === resourceId);
        if (!resource) {
            console.error('–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', resourceId);
            return;
        }
        console.log('üìñ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å:', resource.title);
        document.getElementById('modalTitle').textContent = resource.title;
        document.getElementById('modalContent').innerHTML = formatContent(resource.content || resource.description || '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        const favoriteBtn = document.getElementById('favoriteBtn');
        favoriteBtn.innerHTML = resource.is_favorite ? '‚≠ê –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '‚òÜ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
        document.getElementById('articleModal').style.display = 'flex';
        try {
            const token = localStorage.getItem('token');
            if (token) {
                const response = await fetch(`/api/resources/view/${resourceId}`, {
                    method: 'POST',
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                if (response.ok) {
                    resource.views_count = (resource.views_count || 0) + 1;
                    console.log('üëÅÔ∏è –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω:', resource.views_count);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', error);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ—Å—É—Ä—Å–∞');
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeArticleModal() {
    document.getElementById('articleModal').style.display = 'none';
    currentResourceId = null;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function formatContent(content) {
    if (!content) return '<p style="text-align: center; color: var(--text-secondary); font-style: italic;">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</p>';
    return content
        .replace(/\n\n/g, '</p><p>')
        .replace(/\n/g, '<br>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/^(.+)$/, '<p>$1</p>')
        .replace(/<p><\/p>/g, '');
}

function getResourceIcon(type) {
    const icons = {
        'article': 'üìÑ',
        'video': 'üé•',
        'book': 'üìñ',
        'document': 'üìã'
    };
    return icons[type] || 'üìö';
}

function getResourceGradient(type) {
    const gradients = {
        'article': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        'video': 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
        'book': 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
        'document': 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)'
    };
    return gradients[type] || 'var(--primary-gradient)';
}

function getResourceTypeName(type) {
    const names = {
        'article': '–°–¢–ê–¢–¨–Ø',
        'video': '–í–ò–î–ï–û',
        'book': '–ö–ù–ò–ì–ê',
        'document': '–î–û–ö–£–ú–ï–ù–¢'
    };
    return names[type] || '–†–ï–°–£–†–°';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
async function toggleResourceFavorite(resourceId) {
    try {
        const token = localStorage.getItem('token');
        if (!token) {
            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
            return;
        }
        const resource = currentResources.find(r => r.id === resourceId);
        if (!resource) return;
        const method = resource.is_favorite ? 'DELETE' : 'POST';
        const response = await fetch(`/api/resources/favorite/${resourceId}`, {
            method: method,
            headers: { 'Authorization': `Bearer ${token}` }
        });
        if (response.ok) {
            resource.is_favorite = !resource.is_favorite;
            console.log(resource.is_favorite ? '‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:' : '‚òÜ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', resource.title);
            const filteredResources = getFilteredResources();
            displayResources(filteredResources);
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
    }
}

// –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
function clearFilters() {
    document.getElementById('subjectFilter').value = '';
    document.getElementById('typeFilter').value = '';
    document.getElementById('searchInput').value = '';
    displayResources(currentResources);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
function showFavorites() {
    console.log('‚≠ê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã...');
    const favorites = currentResources.filter(resource => resource.is_favorite);
    if (favorites.length === 0) {
        const container = document.getElementById('resourcesContainer');
        container.innerHTML = `
            <div class="card" style="grid-column: 1 / -1; text-align: center; border-color: #ff9800;">
                <div class="card-body" style="padding: 3rem;">
                    <div style="font-size: 4rem; margin-bottom: 1rem;">‚≠ê</div>
                    <h3>–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</h3>
                    <p style="color: var(--text-secondary); margin-bottom: 1.5rem;">–î–æ–±–∞–≤—å—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫—É</p>
                    <button onclick="loadResources()" class="btn btn-primary">üìö –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã</button>
                </div>
            </div>
        `;
    } else {
        displayResources(favorites);
        console.log('‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:', favorites.length);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
function getFilteredResources() {
    const subjectId = document.getElementById('subjectFilter').value;
    const type = document.getElementById('typeFilter').value;
    const search = document.getElementById('searchInput').value.toLowerCase();
    return currentResources.filter(resource => {
        const matchSubject = !subjectId || resource.subject_id == subjectId;
        const matchType = !type || resource.resource_type === type;
        const matchSearch = !search || 
            resource.title.toLowerCase().includes(search) ||
            (resource.description && resource.description.toLowerCase().includes(search));
        return matchSubject && matchType && matchSearch;
    });
}

function getResourceColor(type) {
    const colors = {
        'article': '#667eea',
        'video': '#f5576c',
        'book': '#4facfe',
        'document': '#43e97b'
    };
    return colors[type] || '#667eea';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è toggleFavorite –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
async function toggleFavorite() {
    if (currentResourceId) {
        await toggleResourceFavorite(currentResourceId);
        const resource = currentResources.find(r => r.id === currentResourceId);
        if (resource) {
            const favoriteBtn = document.getElementById('favoriteBtn');
            favoriteBtn.innerHTML = resource.is_favorite ? '‚≠ê –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '‚òÜ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
        }
    }
}
