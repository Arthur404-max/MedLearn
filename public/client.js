// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function checkAuth() {
    const token = localStorage.getItem('token');
    const protectedPages = ['dashboard.html', 'testing.html', 'resources.html', 'subscription.html'];
    const currentPage = window.location.pathname.split('/').pop();
    
    if (!token) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (protectedPages.includes(currentPage)) {
            window.location.href = 'auth.html';
            return false;
        }
    }
    
    return true;
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkAuthAsync() {
    const token = localStorage.getItem('token');
    const protectedPages = ['dashboard.html', 'testing.html', 'resources.html', 'subscription.html'];
    const currentPage = window.location.pathname.split('/').pop();
    
    if (!token) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (protectedPages.includes(currentPage)) {
            window.location.href = 'auth.html';
            return false;
        }
    } else {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const isValid = await checkUserStatus();
        if (!isValid) {
            return false;
        }
    }
    
    return true;
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    localStorage.removeItem('banInfo');
    localStorage.removeItem('currentUser'); // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É —ç—Ç–æ–≥–æ —Ç–æ–∂–µ
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã –∏–∑ localStorage');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
    const currentPath = window.location.pathname;
    console.log('üìç –¢–µ–∫—É—â–∏–π –ø—É—Ç—å:', currentPath);
    
    // –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (currentPath === '/' || currentPath === '/index.html' || currentPath === '/auth.html') {
        console.log('üè† –£–∂–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...');
        window.location.reload();
    } else {
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.location.href = '/index.html';
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö)
function logoutAndUpdate() {
    console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    localStorage.removeItem('banInfo');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∞–∫–æ–π –º—ã —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const currentPage = window.location.pathname;
    console.log('ÔøΩ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', currentPage);
    
    // –ï—Å–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if (currentPage === '/' || currentPage === '/index.html' || currentPage.endsWith('index.html')) {
        console.log('üîÑ –ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ localStorage
        setTimeout(() => {
            if (typeof updateNavigation === 'function') {
                updateNavigation();
                console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            } else {
                console.log('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è updateNavigation –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                window.location.reload();
            }
        }, 100);
    } else {
        // –ï—Å–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        console.log('üè† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        window.location.href = 'index.html';
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function handleUserBan(banData) {
    console.log('User is banned:', banData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ
    localStorage.setItem('banInfo', JSON.stringify(banData));
    
    // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–∞–Ω–∞
    window.location.href = 'banned.html';
}

// –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
let lastStatusCheck = 0;
const STATUS_CHECK_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–Ω, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç.–¥.)
async function checkUserStatus() {
    const token = localStorage.getItem('token');
    if (!token) return true;
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    const now = Date.now();
    if (now - lastStatusCheck < STATUS_CHECK_INTERVAL) {
        return true; // –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    }
    lastStatusCheck = now;
    
    try {
        const response = await fetch('/api/auth/status', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        if (response.status === 403) {
            const data = await response.json();
            if (data.error === 'USER_BANNED') {
                handleUserBan(data);
                return false;
            }
        }
        
        if (!response.ok && response.status === 401) {
            // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
            logout();
            return false;
        }
        
        return response.ok;
    } catch (error) {
        console.error('Error checking user status:', error);
        return true; // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–¥ API –∑–∞–ø—Ä–æ—Å–∞–º–∏
async function makeAuthenticatedRequest(url, options = {}) {
    const token = localStorage.getItem('token');
    if (!token) {
        throw new Error('No authentication token');
    }
    
    const headers = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
        ...options.headers
    };
    
    const response = await fetch(url, {
        ...options,
        headers
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞–Ω
    if (response.status === 403) {
        const data = await response.json();
        if (data.error === 'USER_BANNED') {
            handleUserBan(data);
            throw new Error('User is banned');
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    if (response.status === 401) {
        logout();
        throw new Error('Authentication failed');
    }
    
    return response;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
if (document.getElementById('loginForm')) {
    document.getElementById('loginForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const errorElement = document.getElementById('errorMessage');

        try {
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();

            if (response.ok) {
                localStorage.setItem('token', data.token);
                localStorage.setItem('user', JSON.stringify(data.user));
                window.location.href = 'dashboard.html';
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (data.error === 'USER_BANNED' || response.status === 403) {
                    handleUserBan(data);
                    return;
                }
                
                errorElement.style.display = 'block';
                errorElement.textContent = data.message;
                
                // –ï—Å–ª–∏ email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                if (data.emailNotVerified) {
                    errorElement.innerHTML = data.message + '<br><a href="verify-email.html" style="color: var(--primary-color); text-decoration: underline;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email</a>';
                }
            }
        } catch (error) {
            errorElement.style.display = 'block';
            errorElement.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ';
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
if (document.getElementById('registerForm')) {
    document.getElementById('registerForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const firstName = document.getElementById('firstName').value.trim();
        const lastName = document.getElementById('lastName').value.trim();
        const email = document.getElementById('email').value.trim();
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        const errorElement = document.getElementById('errorMessage');

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã)
        const nameRegex = /^[A-Za-z]+$/;
        if (!nameRegex.test(firstName)) {
            errorElement.style.display = 'block';
            errorElement.textContent = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (A-Z)';
            return;
        }
        
        if (!nameRegex.test(lastName)) {
            errorElement.style.display = 'block';
            errorElement.textContent = '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (A-Z)';
            return;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
        const passwordRegex = /^[A-Za-z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+$/;
        if (password.length < 6) {
            errorElement.style.display = 'block';
            errorElement.textContent = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
            return;
        }
        
        if (!passwordRegex.test(password)) {
            errorElement.style.display = 'block';
            errorElement.textContent = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã';
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        if (password !== confirmPassword) {
            errorElement.style.display = 'block';
            errorElement.textContent = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
            return;
        }

        try {
            const response = await fetch('/api/auth/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ firstName, lastName, email, password })
            });

            const data = await response.json();

            if (response.ok) {
                // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
                if (data.verificationRequired) {
                    alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–Ω–∞ –ø—Ä–∏–¥–µ—Ç –Ω–∞ –ø–æ—á—Ç—É).');
                    window.location.href = 'verify-email.html';
                } else {
                    localStorage.setItem('token', data.token);
                    localStorage.setItem('user', JSON.stringify(data.user));
                    window.location.href = 'dashboard.html';
                }
            } else {
                errorElement.style.display = 'block';
                errorElement.textContent = data.message;
            }
        } catch (error) {
            errorElement.style.display = 'block';
            errorElement.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
async function loadUserProfile() {
    try {
        const response = await fetch('/api/auth/profile', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        const data = await response.json();
        if (response.ok) {
            document.getElementById('userName').textContent = data.firstName || '–°—Ç—É–¥–µ–Ω—Ç';
            document.getElementById('userEmail').value = data.email || '';
            document.getElementById('userFirstName').value = data.firstName || '';
            document.getElementById('userLastName').value = data.lastName || '';
            document.getElementById('userRole').value = data.role || 'student';
            document.getElementById('registrationDate').value = new Date(data.createdAt).toLocaleDateString('ru-RU');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

async function loadUserStats() {
    try {
        const response = await fetch('/api/stats/testing', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        const data = await response.json();
        if (response.ok) {
            document.getElementById('totalTests').textContent = data.totalTests || 0;
            document.getElementById('averageScore').textContent = (data.averageScore || 0) + '%';
            document.getElementById('studyDays').textContent = data.studyDays || 0;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

async function loadAchievements() {
    try {
        const response = await fetch('/api/stats/achievements', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        const data = await response.json();
        if (response.ok) {
            document.getElementById('achievements').textContent = data.length || 0;
            
            const achievementsList = document.getElementById('achievementsList');
            if (achievementsList) {
                if (data.length === 0) {
                    achievementsList.innerHTML = `
                        <div style="text-align: center; color: var(--text-light); padding: 2rem;">
                            –ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!
                        </div>
                    `;
                } else {
                    achievementsList.innerHTML = data.map(achievement => `
                        <div style="display: flex; align-items: center; padding: 1rem; background: var(--bg-secondary); border-radius: 8px; margin-bottom: 1rem;">
                            <div style="font-size: 2rem; margin-right: 1rem;">${achievement.icon || 'üèÜ'}</div>
                            <div>
                                <h4 style="margin: 0; color: var(--text-primary);">${achievement.name}</h4>
                                <p style="margin: 0; color: var(--text-secondary); font-size: 0.9rem;">${achievement.description}</p>
                            </div>
                        </div>
                    `).join('');
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function loadSubjects() {
    try {
        console.log('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã...');
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å
        const token = localStorage.getItem('token');
        const headers = token ? {
            'Authorization': `Bearer ${token}`
        } : {};
        
        console.log('üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω:', !!token);
        
        const response = await fetch('/api/tests/subjects', {
            headers: headers
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', data.length);
        
        const subjectsGrid = document.getElementById('subjectsGrid');
        if (subjectsGrid) {
            if (data.length === 0) {
                subjectsGrid.innerHTML = `
                    <div class="card" style="text-align: center; grid-column: 1 / -1;">
                        <div class="card-body">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">üìö</div>
                            <h3 class="card-title">–ü—Ä–µ–¥–º–µ—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</h3>
                            <p class="card-subtitle">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
                        </div>
                    </div>
                `;
            } else {
                subjectsGrid.innerHTML = data.map(subject => `
                    <div class="card" onclick="selectSubject(${subject.id}, '${subject.name}')" style="cursor: pointer; transition: all 0.3s ease;">
                        <div class="card-body" style="text-align: center;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">${getSubjectIcon(subject.name)}</div>
                            <h3 class="card-title">${subject.name}</h3>
                            <p class="card-subtitle">${subject.description || '–ò–∑—É—á–µ–Ω–∏–µ ' + subject.name.toLowerCase()}</p>
                        </div>
                    </div>
                `).join('');
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
        const subjectsGrid = document.getElementById('subjectsGrid');
        if (subjectsGrid) {
            subjectsGrid.innerHTML = `
                <div class="card" style="text-align: center; grid-column: 1 / -1; border-color: #e74c3c;">
                    <div class="card-body">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">‚ùå</div>
                        <h3 class="card-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                        <p class="card-subtitle">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
                        <button onclick="loadSubjects()" class="btn btn-primary" style="margin-top: 1rem;">üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                    </div>
                </div>
            `;
        }
    }
}

function getSubjectIcon(subjectName) {
    const icons = {
        '–ê–Ω–∞—Ç–æ–º–∏—è': 'ü¶¥',
        '–§–∏–∑–∏–æ–ª–æ–≥–∏—è': '‚ù§Ô∏è',
        '–ü–∞—Ç–æ–ª–æ–≥–∏—è': 'üî¨',
        '–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è': 'üíä',
        '–¢–µ—Ä–∞–ø–∏—è': 'ü©∫',
        '–•–∏—Ä—É—Ä–≥–∏—è': '‚öîÔ∏è'
    };
    return icons[subjectName] || 'üìö';
}

function selectSubject(subjectId, subjectName) {
    console.log('üìñ –í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç:', subjectName, 'ID:', subjectId);
    window.currentSubjectId = subjectId;
    window.currentSubjectName = subjectName;
    loadCategories(subjectId);
    showSection('categorySelection');
}

async function loadCategories(subjectId) {
    try {
        console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ID:', subjectId);
        
        const token = localStorage.getItem('token');
        const headers = token ? {
            'Authorization': `Bearer ${token}`
        } : {};

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoriesResponse = await fetch(`/api/tests/categories/${subjectId}`, {
            headers: headers
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É)
        const testsResponse = await fetch(`/api/tests/subject/${subjectId}`, {
            headers: headers
        });

        const categoriesGrid = document.getElementById('categoriesGrid');
        if (!categoriesGrid) return;

        let categoriesData = [];
        let testsData = [];

        if (categoriesResponse.ok) {
            categoriesData = await categoriesResponse.json();
        }

        if (testsResponse.ok) {
            testsData = await testsResponse.json();
        }

        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoriesData.length, '—Ç–µ—Å—Ç–æ–≤:', testsData.length);

        let html = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (categoriesData.length > 0) {
            html += categoriesData.map(category => `
                <div class="card" onclick="selectCategory(${category.id}, '${category.name}')" style="cursor: pointer; transition: all 0.3s ease;">
                    <div class="card-body">
                        <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                            <span style="font-size: 1.5rem; margin-right: 0.5rem;">üìÅ</span>
                            <span class="badge" style="background: #e3f2fd; color: #1976d2; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</span>
                        </div>
                        <h3 class="card-title">${category.name}</h3>
                        <p class="card-subtitle">${category.description || '–¢–µ–º–∞ ' + category.name.toLowerCase()}</p>
                    </div>
                </div>
            `).join('');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é (–∏–∑ –∞–¥–º–∏–Ω–∫–∏)
        if (testsData.length > 0) {
            html += testsData.map(test => `
                <div class="card" onclick="startTestBySubject(${test.id}, '${test.title}')" style="cursor: pointer; border-left: 4px solid #4caf50; transition: all 0.3s ease;">
                    <div class="card-body">
                        <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                            <span style="font-size: 1.5rem; margin-right: 0.5rem;">üß™</span>
                            <span class="badge" style="background: #e8f5e9; color: #2e7d32; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">–¢–µ—Å—Ç</span>
                        </div>
                        <h3 class="card-title">${test.title}</h3>
                        <p class="card-subtitle">${test.description || '–ì–æ—Ç–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ'}</p>
                    </div>
                </div>
            `).join('');
        }
        
        if (html === '') {
            html = `
                <div class="card" style="text-align: center; grid-column: 1 / -1; border-color: #ff9800;">
                    <div class="card-body">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">üì≠</div>
                        <h3 class="card-title">–ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h3>
                        <p class="card-subtitle">–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ "${window.currentSubjectName}" —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                        <button onclick="showSubjects()" class="btn btn-primary" style="margin-top: 1rem;">‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç</button>
                    </div>
                </div>
            `;
        }
        
        categoriesGrid.innerHTML = html;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        const categoriesGrid = document.getElementById('categoriesGrid');
        if (categoriesGrid) {
            categoriesGrid.innerHTML = `
                <div class="card" style="text-align: center; grid-column: 1 / -1; border-color: #e74c3c;">
                    <div class="card-body">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">‚ùå</div>
                        <h3 class="card-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                        <p class="card-subtitle">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</p>
                        <button onclick="loadCategories(${subjectId})" class="btn btn-primary" style="margin-top: 1rem;">üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                    </div>
                </div>
            `;
        }
    }
}

function selectCategory(categoryId, categoryName = '–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è') {
    console.log('üìÅ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ID:', categoryId, '–ù–∞–∑–≤–∞–Ω–∏–µ:', categoryName);
    
    window.currentCategoryId = categoryId;
    window.currentCategoryName = categoryName;
    
    loadSubcategories(categoryId);
    showSection('subcategorySelection');
    
    console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryName);
}

async function loadSubcategories(categoryId) {
    try {
        console.log('üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID:', categoryId);
        
        const token = localStorage.getItem('token');
        const headers = token ? {
            'Authorization': `Bearer ${token}`
        } : {};
        
        const response = await fetch(`/api/tests/subcategories/${categoryId}`, {
            headers: headers
        });

        const subcategoriesGrid = document.getElementById('subcategoriesGrid');
        if (!subcategoriesGrid) return;

        if (response.ok) {
            const data = await response.json();
            console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:', data.length);
            
            if (data.length > 0) {
                subcategoriesGrid.innerHTML = data.map(subcategory => `
                    <div class="card" onclick="startTest(${subcategory.id}, '${subcategory.name}')" style="cursor: pointer; transition: all 0.3s ease; border-left: 4px solid #2196f3;">
                        <div class="card-body">
                            <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                                <span style="font-size: 1.5rem; margin-right: 0.5rem;">üìù</span>
                                <span class="badge" style="background: #e3f2fd; color: #1976d2; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</span>
                            </div>
                            <h3 class="card-title">${subcategory.name}</h3>
                            <p class="card-subtitle">${subcategory.description || '–¢–µ–º–∞ ' + subcategory.name.toLowerCase()}</p>
                            <div style="margin-top: 1rem;">
                                <span class="btn btn-primary" style="padding: 0.5rem 1rem; font-size: 0.9rem; border-radius: 0.5rem;">
                                    üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
                                </span>
                            </div>
                        </div>
                    </div>
                `).join('');
            } else {
                subcategoriesGrid.innerHTML = `
                    <div class="card" style="text-align: center; grid-column: 1 / -1; border-color: #ff9800;">
                        <div class="card-body">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">üìÇ</div>
                            <h3 class="card-title">–¢–µ—Å—Ç—ã –≥–æ—Ç–æ–≤—è—Ç—Å—è</h3>
                            <p class="card-subtitle">–¢–µ—Å—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${window.currentCategoryName}" —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã</p>
                            <button onclick="showCategories()" class="btn btn-primary" style="margin-top: 1rem;">‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>
                        </div>
                    </div>
                `;
            }
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        const subcategoriesGrid = document.getElementById('subcategoriesGrid');
        if (subcategoriesGrid) {
            subcategoriesGrid.innerHTML = `
                <div class="card" style="text-align: center; grid-column: 1 / -1; border-color: #e74c3c;">
                    <div class="card-body">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">‚ùå</div>
                        <h3 class="card-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                        <p class="card-subtitle">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.</p>
                        <div style="margin-top: 1rem;">
                            <button onclick="loadSubcategories(${categoryId})" class="btn btn-primary" style="margin-right: 0.5rem;">üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                            <button onclick="showCategories()" class="btn btn-secondary">‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</button>
                        </div>
                    </div>
                </div>
            `;
        }
    }
}

function showSection(sectionId) {
    const sections = ['subjectSelection', 'categorySelection', 'subcategorySelection', 'testContainer', 'resultsContainer'];
    sections.forEach(section => {
        const element = document.getElementById(section);
        if (element) {
            element.style.display = section === sectionId ? 'block' : 'none';
        }
    });
}

function showSubjects() {
    showSection('subjectSelection');
}

function showCategories() {
    if (window.currentSubjectId) {
        loadCategories(window.currentSubjectId);
        showSection('categorySelection');
    }
}

async function startTestBySubject(testId, testTitle = '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç') {
    try {
        console.log('üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–µ—Å—Ç ID:', testId, '–ù–∞–∑–≤–∞–Ω–∏–µ:', testTitle);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const testContainer = document.getElementById('testContainer');
        if (testContainer) {
            testContainer.innerHTML = `
                <div style="text-align: center; padding: 3rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">üéØ</div>
                    <h3>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç...</h3>
                    <p>–ó–∞–≥—Ä—É–∂–∞–µ–º "${testTitle}"</p>
                </div>
            `;
        }
        
        const token = localStorage.getItem('token');
        const headers = token ? {
            'Authorization': `Bearer ${token}`
        } : {};
        
        // –î–ª—è —Ç–µ—Å—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ—Å—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        const response = await fetch(`/api/tests/start-by-id/${testId}`, {
            headers: headers
        });

        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', data.title, '–í–æ–ø—Ä–æ—Å–æ–≤:', data.questions?.length);
            
            window.currentTest = data;
            window.currentQuestionIndex = 0;
            window.userAnswers = [];
            window.testStartTime = Date.now();
            
            showSection('testContainer');
            displayQuestion();
            startTimer(data.timeLimit || 15);
        } else {
            const errorData = await response.json();
            throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        const testContainer = document.getElementById('testContainer');
        if (testContainer) {
            testContainer.innerHTML = `
                <div style="text-align: center; padding: 3rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">‚ùå</div>
                    <h3>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç</h3>
                    <p>"${testTitle}"</p>
                    <p style="color: #e74c3c;">–û—à–∏–±–∫–∞: ${error.message}</p>
                    <div style="margin-top: 2rem;">
                        <button onclick="startTestBySubject(${testId}, '${testTitle}')" class="btn btn-primary" style="margin-right: 0.5rem;">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑</button>
                        <button onclick="showCategories()" class="btn btn-secondary">‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</button>
                    </div>
                </div>
            `;
            showSection('testContainer');
        } else {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç: ' + error.message);
        }
    }
}

async function startTest(subcategoryId, subcategoryName = '–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è') {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID:', subcategoryId, '–ù–∞–∑–≤–∞–Ω–∏–µ:', subcategoryName);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const testContainer = document.getElementById('testContainer');
        if (testContainer) {
            testContainer.innerHTML = `
                <div style="text-align: center; padding: 3rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">‚è≥</div>
                    <h3>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç...</h3>
                    <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ "${subcategoryName}"</p>
                </div>
            `;
        }
        
        const token = localStorage.getItem('token');
        const headers = token ? {
            'Authorization': `Bearer ${token}`
        } : {};
        
        const response = await fetch(`/api/tests/start/${subcategoryId}`, {
            headers: headers
        });

        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', data.title, '–í–æ–ø—Ä–æ—Å–æ–≤:', data.questions?.length);
            
            window.currentTest = data;
            window.currentQuestionIndex = 0;
            window.userAnswers = [];
            window.testStartTime = Date.now();
            
            showSection('testContainer');
            displayQuestion();
            startTimer(data.timeLimit || 15);
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        const testContainer = document.getElementById('testContainer');
        if (testContainer) {
            testContainer.innerHTML = `
                <div style="text-align: center; padding: 3rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">‚ùå</div>
                    <h3>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç</h3>
                    <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                    <div style="margin-top: 2rem;">
                        <button onclick="startTest(${subcategoryId}, '${subcategoryName}')" class="btn btn-primary" style="margin-right: 0.5rem;">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑</button>
                        <button onclick="showCategories()" class="btn btn-secondary">‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</button>
                    </div>
                </div>
            `;
            showSection('testContainer');
        } else {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç: ' + error.message);
        }
    }
}

function displayQuestion() {
    const test = window.currentTest;
    const questionIndex = window.currentQuestionIndex;
    const question = test.questions[questionIndex];

    document.getElementById('testTitle').textContent = test.title;
    document.getElementById('testProgress').textContent = `–í–æ–ø—Ä–æ—Å ${questionIndex + 1} –∏–∑ ${test.questions.length}`;
    document.getElementById('questionText').textContent = question.question_text;

    const answersContainer = document.getElementById('answersContainer');
    answersContainer.innerHTML = question.options.map((option, index) => `
        <label class="card" style="cursor: pointer; padding: 1rem; margin: 0;" onclick="selectAnswer(${index})">
            <input type="radio" name="answer" value="${index}" style="margin-right: 0.5rem;">
            ${option}
        </label>
    `).join('');

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    if (window.userAnswers[questionIndex] !== undefined) {
        const radio = answersContainer.querySelector(`input[value="${window.userAnswers[questionIndex]}"]`);
        if (radio) radio.checked = true;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
    document.getElementById('prevBtn').disabled = questionIndex === 0;
    document.getElementById('nextBtn').textContent = questionIndex === test.questions.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç' : '–°–ª–µ–¥—É—é—â–∏–π';
}

function selectAnswer(answerIndex) {
    window.userAnswers[window.currentQuestionIndex] = answerIndex;
}

function previousQuestion() {
    if (window.currentQuestionIndex > 0) {
        window.currentQuestionIndex--;
        displayQuestion();
    }
}

function nextQuestion() {
    const test = window.currentTest;
    
    if (window.currentQuestionIndex < test.questions.length - 1) {
        window.currentQuestionIndex++;
        displayQuestion();
    } else {
        finishTest();
    }
}

async function finishTest() {
    try {
        const response = await fetch('/api/tests/finish', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({
                testId: window.currentTest.id,
                answers: window.userAnswers
            })
        });

        const data = await response.json();
        if (response.ok) {
            displayResults(data);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç');
    }
}

function displayResults(results) {
    document.getElementById('scorePercentage').textContent = Math.round(results.percentage) + '%';
    document.getElementById('scoreDetails').textContent = 
        `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${results.correctAnswers} –∏–∑ ${window.currentTest.questions.length}`;
    
    const percentage = results.percentage;
    let emoji = 'üìö';
    let message = '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ!';
    
    if (percentage >= 90) {
        emoji = 'üèÜ';
        message = '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
    } else if (percentage >= 75) {
        emoji = 'üéØ';
        message = '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!';
    } else if (percentage >= 60) {
        emoji = 'üëç';
        message = '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
    }
    
    document.getElementById('resultEmoji').textContent = emoji;
    document.getElementById('resultMessage').textContent = message;
    
    showSection('resultsContainer');
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    checkNewAchievements();
}

async function checkNewAchievements() {
    try {
        await fetch('/api/stats/check-achievements', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    }
}

function startTimer(minutes) {
    let timeLeft = minutes * 60;
    const timer = document.getElementById('timer');
    
    window.testTimer = setInterval(() => {
        const mins = Math.floor(timeLeft / 60);
        const secs = timeLeft % 60;
        timer.textContent = `${mins}:${secs.toString().padStart(2, '0')}`;
        
        if (timeLeft <= 0) {
            clearInterval(window.testTimer);
            finishTest();
        }
        
        timeLeft--;
    }, 1000);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
async function loadCurrentSubscription() {
    try {
        const response = await fetch('/api/subscriptions/current', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        const data = await response.json();
        if (response.ok && data.subscription) {
            const sub = data.subscription;
            const currentPlan = document.getElementById('currentPlan');
            const planDescription = document.getElementById('planDescription');
            const planExpiry = document.getElementById('planExpiry');
            const planPrice = document.getElementById('planPrice');
            const planStatus = document.getElementById('planStatus');
            
            if (currentPlan) currentPlan.textContent = sub.plan_name;
            if (planDescription) planDescription.textContent = getSubPlanDescription(sub.plan_type);
            if (planExpiry) planExpiry.textContent = new Date(sub.end_date).toLocaleDateString('ru-RU');
            if (planPrice) planPrice.textContent = sub.price + '‚ÇΩ';
            if (planStatus) planStatus.textContent = sub.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
        } else {
            const currentPlan = document.getElementById('currentPlan');
            const planDescription = document.getElementById('planDescription');
            
            if (currentPlan) currentPlan.textContent = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏';
            if (planDescription) planDescription.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
}

function getSubPlanDescription(planType) {
    const descriptions = {
        'basic': '–ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è',
        'premium': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å AI',
        'yearly': '–ì–æ–¥–æ–≤–æ–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º'
    };
    return descriptions[planType] || '–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞';
}

// =============================================================================
// –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨–Æ
// =============================================================================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤
async function checkAdminPermissions() {
    try {
        const token = localStorage.getItem('token');
        if (!token) return false;
        
        const response = await fetch('/api/user/profile', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (response.ok) {
            const user = await response.json();
            return user.role === 'admin' || user.role === 'teacher';
        }
        
        return false;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:', error);
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async function getSystemStats() {
    try {
        console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        
        const token = localStorage.getItem('token');
        const response = await fetch('/api/admin/stats', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (response.ok) {
            const stats = await response.json();
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats);
            return stats;
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        throw error;
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async function getUsersList(page = 1, limit = 20) {
    try {
        console.log('üë• –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        const token = localStorage.getItem('token');
        const response = await fetch(`/api/admin/users?page=${page}&limit=${limit}`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω:', data.users.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return data;
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        throw error;
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞
async function getTestsForAdmin() {
    try {
        console.log('üìù –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        const token = localStorage.getItem('token');
        const response = await fetch('/api/admin/tests', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (response.ok) {
            const tests = await response.json();
            console.log('‚úÖ –¢–µ—Å—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã:', tests.length, '—Ç–µ—Å—Ç–æ–≤');
            return tests;
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error);
        throw error;
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞
async function getResourcesForAdmin() {
    try {
        console.log('üìö –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        const token = localStorage.getItem('token');
        const response = await fetch('/api/admin/resources', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (response.ok) {
            const resources = await response.json();
            console.log('‚úÖ –†–µ—Å—É—Ä—Å—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã:', resources.length, '—Ä–µ—Å—É—Ä—Å–æ–≤');
            return resources;
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
        throw error;
    }
}

// –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async function adminQuickActions() {
    const hasAdminRights = await checkAdminPermissions();
    
    if (!hasAdminRights) {
        console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return null;
    }
    
    return {
        // –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        banUser: async (userId, reason = '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª') => {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`/api/admin/users/${userId}/ban`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason })
                });
                
                if (response.ok) {
                    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', userId);
                    return true;
                } else {
                    throw new Error(`HTTP ${response.status}`);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                throw error;
            }
        },
        
        unbanUser: async (userId) => {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`/api/admin/users/${userId}/unban`, {
                    method: 'POST',
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (response.ok) {
                    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', userId);
                    return true;
                } else {
                    throw new Error(`HTTP ${response.status}`);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                throw error;
            }
        },
        
        // –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        publishTest: async (testId) => {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`/api/admin/tests/${testId}/publish`, {
                    method: 'POST',
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (response.ok) {
                    console.log('‚úÖ –¢–µ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:', testId);
                    return true;
                } else {
                    throw new Error(`HTTP ${response.status}`);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:', error);
                throw error;
            }
        },
        
        publishResource: async (resourceId) => {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`/api/admin/resources/${resourceId}/publish`, {
                    method: 'POST',
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (response.ok) {
                    console.log('‚úÖ –†–µ—Å—É—Ä—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:', resourceId);
                    return true;
                } else {
                    throw new Error(`HTTP ${response.status}`);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–∞:', error);
                throw error;
            }
        }
    };
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é
async function syncWithAdminPanel() {
    try {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        const hasAdminRights = await checkAdminPermissions();
        if (!hasAdminRights) {
            console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const [systemStats, usersList, testsList, resourcesList] = await Promise.all([
            getSystemStats().catch(e => ({ error: e.message })),
            getUsersList(1, 10).catch(e => ({ error: e.message })),
            getTestsForAdmin().catch(e => ({ error: e.message })),
            getResourcesForAdmin().catch(e => ({ error: e.message }))
        ]);
        
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
        return {
            systemStats,
            users: usersList,
            tests: testsList,
            resources: resourcesList,
            timestamp: new Date().toISOString()
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        return false;
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
function showAdminNotification(message, type = 'info') {
    console.log(`üîî –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ [${type}]:`, message);
    
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = 'admin-notification';
    notification.style.cssText = `
        position: fixed;
        top: 80px;
        right: 20px;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        color: white;
        font-weight: 500;
        z-index: 10000;
        animation: slideInRight 0.3s ease;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        max-width: 400px;
        border-left: 4px solid ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
    `;
    
    // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if (type === 'success') {
        notification.style.background = 'linear-gradient(135deg, #10b981, #059669)';
    } else if (type === 'error') {
        notification.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
    } else {
        notification.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
    }
    
    notification.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <span>${message}</span>
            <button onclick="this.parentElement.parentElement.remove()" 
                    style="background: none; border: none; color: white; font-size: 1.2rem; cursor: pointer; margin-left: 1rem;">
                √ó
            </button>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }
    }, 5000);
}

// CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
if (!document.getElementById('adminNotificationStyles')) {
    const style = document.createElement('style');
    style.id = 'adminNotificationStyles';
    style.textContent = `
        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOutRight {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
    `;
    document.head.appendChild(style);
}
