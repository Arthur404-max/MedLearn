// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allUsers = [];
let currentBanUserId = null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    if (!checkAuth()) {
        window.location.href = '/login';
        return;
    }
    
    loadUsers();
    loadUserStats();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const token = localStorage.getItem('adminToken');
    const loginTime = localStorage.getItem('adminLoginTime');
    
    if (!token || !loginTime) {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ (24 —á–∞—Å–∞)
    const now = Date.now();
    const elapsed = now - parseInt(loginTime);
    const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    
    if (elapsed > maxAge) {
        localStorage.removeItem('adminToken');
        localStorage.removeItem('adminLoginTime');
        return false;
    }
    
    return true;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUserStats() {
    try {
        console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const response = await fetch('http://localhost:3000/api/admin/temp/users/stats');
        
        if (response.ok) {
            const stats = await response.json();
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω–∞:', stats);
            displayUserStats(stats);
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏');
            // Fallback –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            const fallbackStats = {
                total_users: 13,
                verified_users: 10,
                premium_users: 2,
                banned_users: 0,
                active_users_week: 8,
                new_users_week: 3
            };
            displayUserStats(fallbackStats);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        // Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const fallbackStats = {
            total_users: 13,
            verified_users: 10,
            premium_users: 2,
            banned_users: 0,
            active_users_week: 8,
            new_users_week: 3
        };
        displayUserStats(fallbackStats);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function displayUserStats(stats) {
    const statsContainer = document.getElementById('statsContainer');
    statsContainer.innerHTML = `
        <div class="col-md-2">
            <div class="stats-card">
                <h3>${stats.total_users}</h3>
                <p>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
        </div>
        <div class="col-md-2">
            <div class="stats-card">
                <h3>${stats.verified_users}</h3>
                <p>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ</p>
            </div>
        </div>
        <div class="col-md-2">
            <div class="stats-card">
                <h3>${stats.premium_users}</h3>
                <p>–ü—Ä–µ–º–∏—É–º</p>
            </div>
        </div>
        <div class="col-md-2">
            <div class="stats-card">
                <h3>${stats.banned_users}</h3>
                <p>–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ</p>
            </div>
        </div>
        <div class="col-md-2">
            <div class="stats-card">
                <h3>${stats.active_users_week}</h3>
                <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é</p>
            </div>
        </div>
        <div class="col-md-2">
            <div class="stats-card">
                <h3>${stats.new_users_week}</h3>
                <p>–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é</p>
            </div>
        </div>
    `;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function loadUsers() {
    try {
        console.log('üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        const response = await fetch('http://localhost:3000/api/admin/temp/users');
        
        if (response.ok) {
            allUsers = await response.json();
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', allUsers.length);
            displayUsers(allUsers);
        } else {
            document.getElementById('usersContainer').innerHTML = 
                '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        document.getElementById('usersContainer').innerHTML = 
            '<div class="alert alert-danger">–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º</div>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function displayUsers(users) {
    const container = document.getElementById('usersContainer');
    
    if (users.length === 0) {
        container.innerHTML = '<div class="alert alert-info">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    container.innerHTML = users.map(user => `
        <div class="user-card ${getUserCardClass(user)}">
            <div class="row align-items-center">
                <div class="col-md-4">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <i class="fas fa-user-circle fa-2x text-primary"></i>
                        </div>
                        <div>
                            <h6 class="mb-1">${user.first_name || ''} ${user.last_name || ''}</h6>
                            <small class="text-muted">${user.email}</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="d-flex flex-wrap gap-1">
                        <span class="status-badge bg-${getRoleColor(user.role)} text-white">${getRoleText(user.role)}</span>
                        ${user.is_verified ? '<span class="status-badge bg-success text-white">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</span>' : '<span class="status-badge bg-warning text-dark">–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</span>'}
                        ${user.is_premium ? '<span class="status-badge bg-warning text-dark">–ü—Ä–µ–º–∏—É–º</span>' : ''}
                        ${user.is_banned ? '<span class="status-badge bg-danger text-white">–ó–∞–±–∞–Ω–µ–Ω</span>' : ''}
                    </div>
                    ${user.is_banned ? `<small class="text-danger mt-1 d-block">–ü—Ä–∏—á–∏–Ω–∞: ${user.banned_reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</small>` : ''}
                </div>
                <div class="col-md-2">
                    <small class="text-muted">
                        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${formatDate(user.created_at)}<br>
                        ${user.last_login ? `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${formatDate(user.last_login)}` : '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª'}
                    </small>
                </div>
                <div class="col-md-3">
                    <div class="btn-group-vertical w-100" role="group">
                        ${user.is_banned ? 
                            `<button class="btn btn-success btn-sm mb-1" onclick="unbanUser(${user.id})">
                                <i class="fas fa-unlock"></i> –†–∞–∑–±–∞–Ω–∏—Ç—å
                            </button>` :
                            `<button class="btn btn-danger btn-sm mb-1" onclick="showBanModal(${user.id})">
                                <i class="fas fa-ban"></i> –ó–∞–±–∞–Ω–∏—Ç—å
                            </button>`
                        }
                        <button class="btn btn-${user.is_premium ? 'warning' : 'outline-warning'} btn-sm mb-1" onclick="togglePremium(${user.id}, ${!user.is_premium})">
                            <i class="fas fa-crown"></i> ${user.is_premium ? '–£–±—Ä–∞—Ç—å –ø—Ä–µ–º–∏—É–º' : '–î–∞—Ç—å –ø—Ä–µ–º–∏—É–º'}
                        </button>
                        <div class="dropdown">
                            <button class="btn btn-info btn-sm dropdown-toggle w-100" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-user-tag"></i> –†–æ–ª—å
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" onclick="changeRole(${user.id}, 'student')">–°—Ç—É–¥–µ–Ω—Ç</a></li>
                                <li><a class="dropdown-item" href="#" onclick="changeRole(${user.id}, 'teacher')">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</a></li>
                                <li><a class="dropdown-item" href="#" onclick="changeRole(${user.id}, 'admin')">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</a></li>
                            </ul>
                        </div>
                        <button class="btn btn-outline-danger btn-sm mt-1" onclick="deleteUser(${user.id})" ${user.role === 'admin' ? 'disabled' : ''}>
                            <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserCardClass(user) {
    if (user.is_banned) return 'banned-user';
    if (user.is_premium) return 'premium-user';
    if (user.role === 'admin') return 'admin-user';
    return '';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–æ–ª–∏
function getRoleColor(role) {
    switch (role) {
        case 'admin': return 'danger';
        case 'teacher': return 'warning';
        case 'student': return 'primary';
        default: return 'secondary';
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–æ–ª–∏
function getRoleText(role) {
    switch (role) {
        case 'admin': return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
        case 'teacher': return '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å';
        case 'student': return '–°—Ç—É–¥–µ–Ω—Ç';
        default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    if (!dateString) return '–ù–∏–∫–æ–≥–¥–∞';
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU') + ' ' + date.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function filterUsers() {
    const roleFilter = document.getElementById('roleFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    const searchInput = document.getElementById('searchInput').value.toLowerCase();
    
    let filteredUsers = allUsers.filter(user => {
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
        if (roleFilter && user.role !== roleFilter) return false;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (statusFilter) {
            switch (statusFilter) {
                case 'active':
                    if (user.is_banned) return false;
                    break;
                case 'banned':
                    if (!user.is_banned) return false;
                    break;
                case 'premium':
                    if (!user.is_premium) return false;
                    break;
                case 'unverified':
                    if (user.is_verified) return false;
                    break;
            }
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        if (searchInput) {
            const searchText = `${user.email} ${user.first_name || ''} ${user.last_name || ''}`.toLowerCase();
            if (!searchText.includes(searchInput)) return false;
        }
        
        return true;
    });
    
    displayUsers(filteredUsers);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–∞–Ω–∞
function showBanModal(userId) {
    currentBanUserId = userId;
    document.getElementById('banReason').value = '';
    new bootstrap.Modal(document.getElementById('banModal')).show();
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±–∞–Ω
async function confirmBan() {
    const reason = document.getElementById('banReason').value.trim();
    if (!reason) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞');
        return;
    }
    
    try {
        const response = await fetch(`/api/proxy/admin/users/${currentBanUserId}/ban`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ reason })
        });
        
        if (response.ok) {
            bootstrap.Modal.getInstance(document.getElementById('banModal')).hide();
            loadUsers();
            loadUserStats();
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω');
        } else {
            const error = await response.json();
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

// –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function unbanUser(userId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) return;
    
    try {
        const response = await fetch(`/api/proxy/admin/users/${userId}/unban`, {
            method: 'POST'
        });
        
        if (response.ok) {
            loadUsers();
            loadUserStats();
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω');
        } else {
            const error = await response.json();
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
async function togglePremium(userId, isPremium) {
    try {
        const response = await fetch(`/api/proxy/admin/users/${userId}/premium`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ premium: !isPremium })
        });
        
        if (response.ok) {
            loadUsers();
            loadUserStats();
            alert(isPremium ? '–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω' : '–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω');
        } else {
            const error = await response.json();
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

// –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function changeRole(userId, role) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "${getRoleText(role)}"?`)) return;
    
    try {
        const response = await fetch(`/api/proxy/admin/users/${userId}/role`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ role: newRole })
        });
        
        if (response.ok) {
            loadUsers();
            loadUserStats();
            alert('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞');
        } else {
            const error = await response.json();
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

// –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUser(userId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –£–î–ê–õ–ò–¢–¨ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) return;
    
    try {
        const response = await fetch(`/api/proxy/admin/users/${userId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            loadUsers();
            loadUserStats();
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
        } else {
            const error = await response.json();
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}