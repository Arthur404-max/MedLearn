// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentMainServerUrl = 'http://localhost:3000';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    if (!checkAuth()) {
        window.location.href = '/login';
        return;
    }
    
    initializeAdmin();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const token = localStorage.getItem('adminToken');
    const loginTime = localStorage.getItem('adminLoginTime');
    
    if (!token || !loginTime) {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ (24 —á–∞—Å–∞)
    const now = Date.now();
    const elapsed = now - parseInt(loginTime);
    const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    
    if (elapsed > maxAge) {
        localStorage.removeItem('adminToken');
        localStorage.removeItem('adminLoginTime');
        return false;
    }
    
    return true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function initializeAdmin() {
    await checkServerConnection();
    await loadDashboardStats();
    setupForms();
    updateConnectionStatus();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
async function checkServerConnection() {
    try {
        const response = await fetch('/api/health');
        if (response.ok) {
            const data = await response.json();
            document.getElementById('connectionStatus').innerHTML = 'üü¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ';
            if (document.getElementById('mainServerStatus')) {
                document.getElementById('mainServerStatus').innerHTML = '<span style="color: #22c55e;">‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω</span>';
            }
            if (document.getElementById('dbStatus')) {
                document.getElementById('dbStatus').innerHTML = '<span style="color: #22c55e;">‚úÖ –ê–∫—Ç–∏–≤–Ω–∞</span>';
            }
        } else {
            throw new Error('Health check failed');
        }
    } catch (error) {
        document.getElementById('connectionStatus').innerHTML = 'üî¥ –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
        if (document.getElementById('mainServerStatus')) {
            document.getElementById('mainServerStatus').innerHTML = '<span style="color: #ef4444;">‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω</span>';
        }
        if (document.getElementById('dbStatus')) {
            document.getElementById('dbStatus').innerHTML = '<span style="color: #f59e0b;">‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</span>';
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
async function loadDashboardStats() {
    try {
        console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        const totalUsers = document.getElementById('totalUsers');
        const totalResources = document.getElementById('totalResources');
        const totalTests = document.getElementById('totalTests');
        const todayActivity = document.getElementById('todayActivity');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
        if (totalUsers) totalUsers.textContent = '‚è≥';
        if (totalResources) totalResources.textContent = '‚è≥';
        if (totalTests) totalTests.textContent = '‚è≥';
        if (todayActivity) todayActivity.textContent = '‚è≥';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [usersData, resourcesData, testsData, activityData] = await Promise.all([
            // –ó–∞–ø—Ä–æ—Å—ã –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
            fetch(`${currentMainServerUrl}/api/admin/stats`, {
                headers: {
                    'Authorization': 'Bearer admin-panel-access-key'
                }
            }).then(r => r.ok ? r.json() : null).catch(e => null),
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –µ—Å–ª–∏ admin API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            fetch(`${currentMainServerUrl}/api/resources`).then(r => r.ok ? r.json() : []).catch(e => []),
            fetch('/api/tests').then(r => r.ok ? r.json() : []).catch(e => []),
            fetch(`${currentMainServerUrl}/api/admin/activity?limit=10`).then(r => r.ok ? r.json() : {activities: []}).catch(e => ({activities: []}))
        ]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (usersData) {
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', usersData);
            if (totalUsers) animateNumber(totalUsers, usersData.users?.total_users || 0);
            if (totalResources) animateNumber(totalResources, usersData.resources?.total_resources || resourcesData.length);
            if (totalTests) animateNumber(totalTests, usersData.tests?.total_tests || testsData.length);
            if (todayActivity) animateNumber(todayActivity, usersData.results?.attempts_week || activityData.activities.length);
        } else {
            // Fallback –∫ –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
            console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ...');
            if (totalUsers) animateNumber(totalUsers, 13); // –ò–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (totalResources) animateNumber(totalResources, resourcesData.length || 5);
            if (totalTests) animateNumber(totalTests, testsData.length || 8);
            if (todayActivity) animateNumber(todayActivity, activityData.activities.length || 0);
        }
        
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const elements = ['totalUsers', 'totalResources', 'totalTests', 'todayActivity'];
        elements.forEach(id => {
            const element = document.getElementById(id);
            if (element) element.textContent = '–Ω/–¥';
        });
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function animateNumber(element, targetValue, duration = 1500) {
    const startValue = 0;
    const startTime = Date.now();
    
    function updateNumber() {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        const easeProgress = 1 - Math.pow(1 - progress, 3);
        const currentValue = Math.floor(startValue + (targetValue - startValue) * easeProgress);
        
        element.textContent = currentValue;
        
        if (progress < 1) {
            requestAnimationFrame(updateNumber);
        }
    }
    
    updateNumber();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤
function showSection(sectionName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    document.querySelectorAll('.content-section').forEach(section => {
        section.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    document.querySelectorAll('.nav-link').forEach(item => {
        item.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    document.getElementById(sectionName).classList.add('active');
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    if (event && event.target) {
        event.target.classList.add('active');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
    loadSectionData(sectionName);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
async function loadSectionData(sectionName) {
    switch(sectionName) {
        case 'tests':
            await loadSubjectsForTests();
            await loadTests();
            break;
        case 'resources':
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
            break;
        case 'users':
            // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
            break;
        default:
            break;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º
function setupForms() {
    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    const testForm = document.getElementById('testForm');
    if (testForm) {
        testForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const questions = collectQuestions();
            if (questions.length === 0) {
                alert('‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∫ —Ç–µ—Å—Ç—É');
                return;
            }
            
            const formData = {
                title: document.getElementById('testTitle').value,
                description: document.getElementById('testDescription').value,
                subject: document.getElementById('testSubject').value,
                category: document.getElementById('testCategory').value,
                duration: parseInt(document.getElementById('testDuration').value),
                questions: questions
            };
            
            const submitBtn = this.querySelector('.submit-btn');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';
            submitBtn.disabled = true;
            
            try {
                const response = await fetch('/api/proxy/admin/tests', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    alert(`‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
                    this.reset();
                    clearTestForm();
                    await loadTests();
                } else {
                    const error = await response.json();
                    alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç'}`);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
                alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            }
            
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
        });
    }

    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
    const resourceForm = document.getElementById('resourceForm');
    if (resourceForm) {
        resourceForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                title: document.getElementById('resourceTitle').value,
                type: document.getElementById('resourceType').value,
                subject: document.getElementById('resourceSubject').value,
                url: document.getElementById('resourceUrl').value,
                description: document.getElementById('resourceDescription').value
            };
            
            const submitBtn = this.querySelector('.submit-btn');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...';
            submitBtn.disabled = true;
            
            try {
                const response = await fetch('/api/proxy/admin/resources', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                if (response.ok) {
                    alert('‚úÖ –†–µ—Å—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
                    this.reset();
                } else {
                    const error = await response.json();
                    alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å'}`);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞:', error);
                alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            }
            
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
        });
    }
}

// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã
function collectQuestions() {
    const questions = [];
    const questionItems = document.querySelectorAll('.question-item');
    
    questionItems.forEach(item => {
        const questionText = item.querySelector('textarea').value.trim();
        const explanation = item.querySelectorAll('textarea')[1]?.value.trim() || '';
        const options = [];
        
        const optionItems = item.querySelectorAll('.option-item');
        optionItems.forEach(optionItem => {
            const checkbox = optionItem.querySelector('input[type="checkbox"]');
            const textInput = optionItem.querySelector('input[type="text"]');
            
            if (textInput.value.trim()) {
                options.push({
                    text: textInput.value.trim(),
                    is_correct: checkbox.checked
                });
            }
        });
        
        if (questionText && options.length >= 2) {
            questions.push({
                text: questionText,
                explanation: explanation,
                type: 'multiple_choice',
                options: options,
                points: 1
            });
        }
    });
    
    return questions;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–æ–≤
async function loadSubjectsForTests() {
    try {
        const response = await fetch('/api/proxy/tests/subjects');
        if (response.ok) {
            const subjects = await response.json();
            const select = document.getElementById('testSubject');
            if (select) {
                select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</option>';
                subjects.forEach(subject => {
                    const option = document.createElement('option');
                    option.value = subject.name;
                    option.textContent = `${subject.icon || 'üìö'} ${subject.name}`;
                    select.appendChild(option);
                });
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤
async function loadTests() {
    try {
        const response = await fetch('/api/proxy/admin/tests');
        if (response.ok) {
            const tests = await response.json();
            displayTests(tests);
        } else {
            const testsList = document.getElementById('testList');
            if (testsList) {
                testsList.innerHTML = '<div class="loading">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤</div>';
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤:', error);
        const testsList = document.getElementById('testList');
        if (testsList) {
            testsList.innerHTML = '<div class="loading">‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º</div>';
        }
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
function displayTests(tests) {
    const container = document.getElementById('testList');
    if (!container) return;
    
    if (tests.length === 0) {
        container.innerHTML = '<div class="loading">üì≠ –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }
    
    container.innerHTML = tests.map(test => `
        <div class="test-item">
            <div class="test-header">
                <h4>${test.title}</h4>
                <div class="test-meta">
                    <span class="test-subject">${test.subject || '–û–±—â–∏–π'}</span>
                    <span class="test-category">${test.category || '–ë–∞–∑–æ–≤—ã–π'}</span>
                </div>
            </div>
            ${test.description ? `<div class="test-description">${test.description}</div>` : ''}
            <div class="test-stats">
                <span>‚è±Ô∏è ${test.duration || 30} –º–∏–Ω</span>
                <span>‚ùì ${test.questions_count || 0} –≤–æ–ø—Ä–æ—Å–æ–≤</span>
                <span>üìä –°–æ–∑–¥–∞–Ω: ${new Date(test.created_at).toLocaleDateString('ru-RU')}</span>
            </div>
            <div class="test-actions">
                <button onclick="editTest(${test.id})" class="edit-test-btn">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button onclick="deleteTest(${test.id}, '${test.title}')" class="delete-test-btn">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                <button onclick="viewTestQuestions(${test.id})" class="view-questions-btn">‚ùì –í–æ–ø—Ä–æ—Å—ã</button>
            </div>
        </div>
    `).join('');
}

// ========== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–û–ü–†–û–°–ê–ú–ò ==========
let questionCounter = 0;

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async function testConnection() {
    const resultDiv = document.getElementById('connectionResult');
    if (!resultDiv) return;
    
    try {
        const response = await fetch('/api/health');
        
        if (response.ok) {
            const data = await response.json();
            resultDiv.className = 'connection-result success';
            resultDiv.innerHTML = `‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –°–µ—Ä–≤–µ—Ä: ${data.status}, –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${data.database}`;
            resultDiv.style.display = 'block';
            
            await checkServerConnection();
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    } catch (error) {
        resultDiv.className = 'connection-result error';
        resultDiv.innerHTML = `‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`;
        resultDiv.style.display = 'block';
        
        document.getElementById('connectionStatus').innerHTML = 'üî¥ –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
    const url = document.getElementById('mainServerUrl')?.value;
    const accessKey = document.getElementById('accessKey')?.value;
    
    if (url) {
        currentMainServerUrl = url;
        localStorage.setItem('adminServerUrl', url);
    }
    
    if (accessKey) {
        localStorage.setItem('adminAccessKey', accessKey);
    }
    
    alert('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
}

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
function clearCache() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏?')) {
        localStorage.removeItem('adminServerUrl');
        localStorage.removeItem('adminAccessKey');
        alert('‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!');
    }
}

// –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
function resetSettings() {
    if (confirm('‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
        localStorage.clear();
        location.reload();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function updateConnectionStatus() {
    setInterval(checkServerConnection, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
    if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏?')) {
        localStorage.removeItem('adminToken');
        localStorage.removeItem('adminLoginTime');
        window.location.href = '/login';
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–û–ü–†–û–°–ê–ú–ò ==========

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
function addQuestion() {
    questionCounter++;
    const container = document.getElementById('questionsContainer');
    
    const questionHtml = `
        <div class="question-item" data-question-id="${questionCounter}">
            <div class="question-header">
                <div class="question-number">‚ùì –í–æ–ø—Ä–æ—Å ${questionCounter}</div>
                <button type="button" onclick="removeQuestion(${questionCounter})" class="remove-question-btn">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
            
            <div class="question-input">
                <label>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</label>
                <textarea placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞..." required></textarea>
            </div>
            
            <div class="question-input">
                <label>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                <textarea placeholder="–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞..." rows="2"></textarea>
            </div>
            
            <div class="answers-section">
                <div class="answers-header">
                    <h5>üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</h5>
                    <button type="button" onclick="addAnswer(${questionCounter})" class="add-answer-btn">‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç</button>
                </div>
                <div class="answers-list" id="answers-${questionCounter}">
                    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å -->
                </div>
            </div>
        </div>
    `;
    
    container.insertAdjacentHTML('beforeend', questionHtml);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    addAnswer(questionCounter);
    addAnswer(questionCounter);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
function removeQuestion(questionId) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?')) {
        const questionElement = document.querySelector(`[data-question-id="${questionId}"]`);
        if (questionElement) {
            questionElement.remove();
            updateQuestionNumbers();
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
function updateQuestionNumbers() {
    const questions = document.querySelectorAll('.question-item');
    questions.forEach((question, index) => {
        const numberElement = question.querySelector('.question-number');
        if (numberElement) {
            numberElement.textContent = `‚ùì –í–æ–ø—Ä–æ—Å ${index + 1}`;
        }
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
function addAnswer(questionId) {
    const answersContainer = document.getElementById(`answers-${questionId}`);
    const answerCount = answersContainer.children.length + 1;
    
    const answerHtml = `
        <div class="answer-item">
            <input type="checkbox" class="answer-checkbox" title="–û—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç">
            <input type="text" class="answer-input" placeholder="–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ${answerCount}" required>
            <button type="button" onclick="removeAnswer(this)" class="remove-answer-btn">üóëÔ∏è</button>
        </div>
    `;
    
    answersContainer.insertAdjacentHTML('beforeend', answerHtml);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
function removeAnswer(button) {
    const answerItem = button.closest('.answer-item');
    const answersContainer = answerItem.parentElement;
    
    // –ù–µ –¥–∞–µ–º —É–¥–∞–ª–∏—Ç—å –µ—Å–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –º–µ–Ω–µ–µ 2 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if (answersContainer.children.length <= 2) {
        alert('–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!');
        return;
    }
    
    answerItem.remove();
}

// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–æ—Ä–º—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function collectQuestions() {
    const questions = [];
    const questionItems = document.querySelectorAll('.question-item');
    
    questionItems.forEach((item, index) => {
        const textareas = item.querySelectorAll('textarea');
        const questionText = textareas[0]?.value.trim();
        const explanation = textareas[1]?.value.trim() || '';
        
        const answerItems = item.querySelectorAll('.answer-item');
        const options = [];
        
        answerItems.forEach(answerItem => {
            const checkbox = answerItem.querySelector('.answer-checkbox');
            const textInput = answerItem.querySelector('.answer-input');
            
            if (textInput.value.trim()) {
                options.push({
                    text: textInput.value.trim(),
                    is_correct: checkbox.checked
                });
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
        if (questionText && options.length >= 2) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            const hasCorrectAnswer = options.some(option => option.is_correct);
            if (!hasCorrectAnswer) {
                alert(`–í–æ–ø—Ä–æ—Å ${index + 1}: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–º–µ—Ç–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!`);
                return [];
            }
            
            questions.push({
                text: questionText,
                explanation: explanation,
                type: 'multiple_choice',
                options: options,
                points: 1
            });
        } else {
            alert(`–í–æ–ø—Ä–æ—Å ${index + 1}: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!`);
            return [];
        }
    });
    
    return questions;
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function clearTestForm() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Ñ–æ—Ä–º—É —Ç–µ—Å—Ç–∞?')) {
        document.getElementById('testForm').reset();
        document.getElementById('questionsContainer').innerHTML = '';
        questionCounter = 0;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const submitBtn = document.querySelector('#testForm .submit-btn');
        if (submitBtn) {
            submitBtn.textContent = 'üíæ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç';
            delete submitBtn.dataset.testId;
            delete submitBtn.dataset.editMode;
        }
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ï–°–¢–ê–ú–ò ==========

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
async function editTest(testId) {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        const response = await fetch(`/api/proxy/admin/tests/${testId}`);
        if (!response.ok) {
            throw new Error('–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        const test = await response.json();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞
        document.getElementById('testTitle').value = test.title || '';
        document.getElementById('testSubject').value = test.subject || '';
        document.getElementById('testCategory').value = test.category || '';
        document.getElementById('testDuration').value = test.duration || 30;
        document.getElementById('testDescription').value = test.description || '';
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        document.getElementById('questionsContainer').innerHTML = '';
        questionCounter = 0;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
        if (test.questions && test.questions.length > 0) {
            test.questions.forEach(question => {
                addQuestionWithData(question);
            });
        }
        
        // –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ "–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç"
        const submitBtn = document.querySelector('#testForm .submit-btn');
        submitBtn.textContent = 'üíæ –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç';
        submitBtn.dataset.testId = testId;
        submitBtn.dataset.editMode = 'true';
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ç–µ—Å—Ç–æ–≤
        showSection('tests');
        
        alert('‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
async function deleteTest(testId, testTitle) {
    if (!confirm(`‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç "${testTitle}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`)) {
        return;
    }
    
    try {
        const response = await fetch(`/api/proxy/admin/tests/${testId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            alert(`‚úÖ –¢–µ—Å—Ç "${testTitle}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
            loadTests(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        } else {
            const error = await response.json();
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç'}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞
async function viewTestQuestions(testId) {
    try {
        const response = await fetch(`/api/proxy/admin/tests/${testId}/questions`);
        if (!response.ok) {
            throw new Error('–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        const questions = await response.json();
        
        let questionsHtml = `
            <div class="questions-modal">
                <div class="questions-modal-content">
                    <div class="questions-modal-header">
                        <h3>‚ùì –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞</h3>
                        <button onclick="closeQuestionsModal()" class="close-modal-btn">‚úï</button>
                    </div>
                    <div class="questions-modal-body">
        `;
        
        questions.forEach((question, index) => {
            questionsHtml += `
                <div class="question-preview">
                    <div class="question-preview-header">
                        <strong>–í–æ–ø—Ä–æ—Å ${index + 1}:</strong>
                    </div>
                    <div class="question-preview-text">${question.text}</div>
                    ${question.explanation ? `<div class="question-explanation">üí° ${question.explanation}</div>` : ''}
                    <div class="question-options">
                        ${question.options.map(option => `
                            <div class="option-preview ${option.is_correct ? 'correct' : ''}">
                                ${option.is_correct ? '‚úÖ' : '‚ùå'} ${option.text}
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        });
        
        questionsHtml += `
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
        const modalDiv = document.createElement('div');
        modalDiv.innerHTML = questionsHtml;
        document.body.appendChild(modalDiv);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞');
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
function closeQuestionsModal() {
    const modal = document.querySelector('.questions-modal');
    if (modal) {
        modal.parentElement.remove();
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function addQuestionWithData(questionData) {
    questionCounter++;
    const container = document.getElementById('questionsContainer');
    
    const questionHtml = `
        <div class="question-item" data-question-id="${questionCounter}">
            <div class="question-header">
                <div class="question-number">‚ùì –í–æ–ø—Ä–æ—Å ${questionCounter}</div>
                <button type="button" onclick="removeQuestion(${questionCounter})" class="remove-question-btn">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
            
            <div class="question-input">
                <label>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</label>
                <textarea placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞..." required>${questionData.text || ''}</textarea>
            </div>
            
            <div class="question-input">
                <label>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                <textarea placeholder="–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞..." rows="2">${questionData.explanation || ''}</textarea>
            </div>
            
            <div class="answers-section">
                <div class="answers-header">
                    <h5>üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</h5>
                    <button type="button" onclick="addAnswer(${questionCounter})" class="add-answer-btn">‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç</button>
                </div>
                <div class="answers-list" id="answers-${questionCounter}">
                    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å -->
                </div>
            </div>
        </div>
    `;
    
    container.insertAdjacentHTML('beforeend', questionHtml);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    if (questionData.options && questionData.options.length > 0) {
        const answersContainer = document.getElementById(`answers-${questionCounter}`);
        questionData.options.forEach(option => {
            const answerHtml = `
                <div class="answer-item">
                    <input type="checkbox" class="answer-checkbox" ${option.is_correct ? 'checked' : ''} title="–û—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç">
                    <input type="text" class="answer-input" value="${option.text}" required>
                    <button type="button" onclick="removeAnswer(this)" class="remove-answer-btn">üóëÔ∏è</button>
                </div>
            `;
            answersContainer.insertAdjacentHTML('beforeend', answerHtml);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
    setTimeout(() => {
        if (document.getElementById('testList')) {
            loadTests();
        }
    }, 500);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º—ã —Ç–µ—Å—Ç–∞
    setTimeout(() => {
        const testForm = document.getElementById('testForm');
        if (testForm && !testForm.dataset.handlerAdded) {
            testForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const questions = collectQuestions();
                if (questions.length === 0) {
                    return; // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ collectQuestions
                }
                
                const formData = {
                    title: document.getElementById('testTitle').value,
                    subject: document.getElementById('testSubject').value,
                    category: document.getElementById('testCategory').value,
                    duration: parseInt(document.getElementById('testDuration').value) || 30,
                    description: document.getElementById('testDescription').value,
                    questions: questions
                };
                
                const submitBtn = this.querySelector('.submit-btn');
                const originalText = submitBtn.textContent;
                const isEditMode = submitBtn.dataset.editMode === 'true';
                const testId = submitBtn.dataset.testId;
                
                submitBtn.textContent = isEditMode ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞...' : '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞...';
                submitBtn.disabled = true;
                
                try {
                    const url = isEditMode ? `/api/proxy/admin/tests/${testId}` : '/api/proxy/admin/tests';
                    const method = isEditMode ? 'PUT' : 'POST';
                    
                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    if (response.ok) {
                        const action = isEditMode ? '–æ–±–Ω–æ–≤–ª–µ–Ω' : '—Å–æ–∑–¥–∞–Ω';
                        alert(`‚úÖ –¢–µ—Å—Ç "${formData.title}" —É—Å–ø–µ—à–Ω–æ ${action} —Å ${questions.length} –≤–æ–ø—Ä–æ—Å–∞–º–∏!`);
                        clearTestForm();
                        
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        submitBtn.textContent = 'üíæ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç';
                        delete submitBtn.dataset.testId;
                        delete submitBtn.dataset.editMode;
                        
                        if (typeof loadTests === 'function') {
                            loadTests(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
                        }
                    } else {
                        const error = await response.json();
                        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç'}`);
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
                    alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
                }
                
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            });
            testForm.dataset.handlerAdded = 'true';
        }
    }, 1000);
});