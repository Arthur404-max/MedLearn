import { pool } from '../config/db';

export async function initializeDatabase() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await pool.query(`
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                email VARCHAR(255) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                first_name VARCHAR(100),
                last_name VARCHAR(100),
                role VARCHAR(50) DEFAULT 'student',
                is_verified BOOLEAN DEFAULT FALSE,
                verification_token VARCHAR(255),
                is_premium BOOLEAN DEFAULT FALSE,
                is_banned BOOLEAN DEFAULT FALSE,
                ban_reason TEXT,
                banned_at TIMESTAMP WITH TIME ZONE,
                banned_until TIMESTAMP WITH TIME ZONE,
                banned_by INTEGER REFERENCES users(id),
                is_deleted BOOLEAN DEFAULT FALSE,
                last_login TIMESTAMP WITH TIME ZONE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ users
        try {
            await pool.query(`
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS last_login TIMESTAMP WITH TIME ZONE
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü last_login –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "—Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ last_login:', error.message);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –±–∞–Ω–∞
        try {
            await pool.query(`
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS is_banned BOOLEAN DEFAULT FALSE
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü is_banned –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "—Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ is_banned:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS ban_reason TEXT
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü ban_reason –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "—Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ ban_reason:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS banned_at TIMESTAMP WITH TIME ZONE
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü banned_at –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "—Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ banned_at:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS banned_by INTEGER
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü banned_by –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "—Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ banned_by:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS banned_until TIMESTAMP WITH TIME ZONE
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü banned_until –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ banned_until:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE users 
                ADD COLUMN IF NOT EXISTS is_deleted BOOLEAN DEFAULT FALSE
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü is_deleted –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ is_deleted:', error.message);
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        await pool.query(`
            CREATE TABLE IF NOT EXISTS subjects (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subjects —Å–æ–∑–¥–∞–Ω–∞');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await pool.query(`
            CREATE TABLE IF NOT EXISTS categories (
                id SERIAL PRIMARY KEY,
                subject_id INTEGER REFERENCES subjects(id) ON DELETE CASCADE,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories —Å–æ–∑–¥–∞–Ω–∞');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await pool.query(`
            CREATE TABLE IF NOT EXISTS subcategories (
                id SERIAL PRIMARY KEY,
                category_id INTEGER REFERENCES categories(id) ON DELETE CASCADE,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subcategories —Å–æ–∑–¥–∞–Ω–∞');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥–º–∏–Ω–∫–∏
        await pool.query(`
            CREATE TABLE IF NOT EXISTS tests (
                id SERIAL PRIMARY KEY,
                subject_id INTEGER REFERENCES subjects(id) ON DELETE SET NULL,
                category_id INTEGER REFERENCES categories(id) ON DELETE SET NULL,
                subcategory_id INTEGER REFERENCES subcategories(id) ON DELETE CASCADE,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                time_limit INTEGER DEFAULT 30,
                difficulty_level VARCHAR(20) DEFAULT 'medium',
                is_active BOOLEAN DEFAULT TRUE,
                is_published BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ tests —Å–æ–∑–¥–∞–Ω–∞');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É tests –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–¥–º–∏–Ω–∫–∏
        try {
            await pool.query(`
                ALTER TABLE tests 
                ADD COLUMN IF NOT EXISTS subject_id INTEGER
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü subject_id –≤ tests –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ subject_id –≤ tests:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE tests 
                ADD COLUMN IF NOT EXISTS category_id INTEGER
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü category_id –≤ tests –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ category_id –≤ tests:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE tests 
                ADD COLUMN IF NOT EXISTS is_published BOOLEAN DEFAULT FALSE
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü is_published –≤ tests –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ is_published –≤ tests:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE tests 
                ADD CONSTRAINT tests_subject_id_fkey
                FOREIGN KEY (subject_id) REFERENCES subjects(id) ON DELETE SET NULL
            `);
        } catch (error: any) {
            if (error.code !== '42710') { // duplicate_object
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ tests_subject_id_fkey:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE tests 
                ADD CONSTRAINT tests_category_id_fkey
                FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE SET NULL
            `);
        } catch (error: any) {
            if (error.code !== '42710') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ tests_category_id_fkey:', error.message);
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        await pool.query(`
            CREATE TABLE IF NOT EXISTS questions (
                id SERIAL PRIMARY KEY,
                test_id INTEGER REFERENCES tests(id) ON DELETE CASCADE,
                question_text TEXT NOT NULL,
                question_type VARCHAR(50) DEFAULT 'multiple_choice',
                explanation TEXT,
                points INTEGER DEFAULT 1,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ questions —Å–æ–∑–¥–∞–Ω–∞');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–≤–µ—Ç–æ–≤
        await pool.query(`
            CREATE TABLE IF NOT EXISTS answers (
                id SERIAL PRIMARY KEY,
                question_id INTEGER REFERENCES questions(id) ON DELETE CASCADE,
                answer_text TEXT NOT NULL,
                is_correct BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ answers —Å–æ–∑–¥–∞–Ω–∞');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        await pool.query(`
            CREATE TABLE IF NOT EXISTS test_results (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                test_id INTEGER REFERENCES tests(id) ON DELETE CASCADE,
                score INTEGER NOT NULL,
                max_score INTEGER NOT NULL,
                percentage DECIMAL(5,2),
                time_taken INTEGER, -- –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                answers_data JSONB,
                completed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ test_results —Å–æ–∑–¥–∞–Ω–∞');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ—Å—É—Ä—Å–æ–≤
        await pool.query(`
            CREATE TABLE IF NOT EXISTS resources (
                id SERIAL PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                content TEXT,
                resource_type VARCHAR(50) NOT NULL,
                url TEXT,
                file_path VARCHAR(500),
                subject_id INTEGER REFERENCES subjects(id) ON DELETE SET NULL,
                category_id INTEGER REFERENCES categories(id) ON DELETE SET NULL,
                is_premium BOOLEAN DEFAULT FALSE,
                views_count INTEGER DEFAULT 0,
                likes_count INTEGER DEFAULT 0,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ resources —Å–æ–∑–¥–∞–Ω–∞');

        try {
            await pool.query(`
                ALTER TABLE resources 
                ADD COLUMN IF NOT EXISTS file_path VARCHAR(500)
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü file_path –≤ resources –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ file_path –≤ resources:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE resources 
                ADD COLUMN IF NOT EXISTS views_count INTEGER DEFAULT 0
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü views_count –≤ resources –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ views_count –≤ resources:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE resources 
                ADD COLUMN IF NOT EXISTS likes_count INTEGER DEFAULT 0
            `);
            console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü likes_count –≤ resources –¥–æ–±–∞–≤–ª–µ–Ω');
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ likes_count –≤ resources:', error.message);
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–ø–∏—Å–æ–∫
        await pool.query(`
            CREATE TABLE IF NOT EXISTS subscriptions (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                plan_type VARCHAR(50) NOT NULL,
                plan_name VARCHAR(100),
                duration VARCHAR(20),
                price DECIMAL(10,2),
                features JSONB,
                start_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                end_date TIMESTAMP WITH TIME ZONE,
                is_active BOOLEAN DEFAULT TRUE,
                payment_status VARCHAR(20) DEFAULT 'pending',
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subscriptions —Å–æ–∑–¥–∞–Ω–∞');

        try {
            await pool.query(`
                ALTER TABLE subscriptions 
                ADD COLUMN IF NOT EXISTS plan_name VARCHAR(100)
            `);
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ plan_name –≤ subscriptions:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE subscriptions 
                ADD COLUMN IF NOT EXISTS duration VARCHAR(20)
            `);
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ duration –≤ subscriptions:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE subscriptions 
                ADD COLUMN IF NOT EXISTS price DECIMAL(10,2)
            `);
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ price –≤ subscriptions:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE subscriptions 
                ADD COLUMN IF NOT EXISTS features JSONB
            `);
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ features –≤ subscriptions:', error.message);
            }
        }

        try {
            await pool.query(`
                ALTER TABLE subscriptions 
                ADD COLUMN IF NOT EXISTS payment_status VARCHAR(20) DEFAULT 'pending'
            `);
        } catch (error: any) {
            if (error.code !== '42701') {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ payment_status –≤ subscriptions:', error.message);
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        await pool.query(`
            CREATE TABLE IF NOT EXISTS user_favorites (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                resource_id INTEGER REFERENCES resources(id) ON DELETE CASCADE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, resource_id)
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_favorites —Å–æ–∑–¥–∞–Ω–∞');

        await pool.query(`
            CREATE TABLE IF NOT EXISTS user_bans (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                banned_by INTEGER REFERENCES users(id),
                ban_reason TEXT,
                banned_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                banned_until TIMESTAMP WITH TIME ZONE,
                is_permanent BOOLEAN DEFAULT FALSE,
                is_active BOOLEAN DEFAULT TRUE,
                unban_reason TEXT,
                unbanned_at TIMESTAMP WITH TIME ZONE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_bans —Å–æ–∑–¥–∞–Ω–∞');

        await pool.query(`
            CREATE TABLE IF NOT EXISTS achievements (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                icon VARCHAR(100),
                criteria JSONB,
                points INTEGER DEFAULT 0,
                badge_color VARCHAR(20) DEFAULT 'blue',
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ achievements —Å–æ–∑–¥–∞–Ω–∞');

        await pool.query(`
            CREATE TABLE IF NOT EXISTS user_achievements (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                achievement_id INTEGER REFERENCES achievements(id) ON DELETE CASCADE,
                earned_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, achievement_id)
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_achievements —Å–æ–∑–¥–∞–Ω–∞');

        await pool.query(`
            CREATE TABLE IF NOT EXISTS test_attempts (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                test_id INTEGER REFERENCES tests(id) ON DELETE CASCADE,
                score INTEGER NOT NULL,
                total_questions INTEGER NOT NULL,
                correct_answers INTEGER NOT NULL,
                time_spent INTEGER,
                percentage DECIMAL(5,2),
                completed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ test_attempts —Å–æ–∑–¥–∞–Ω–∞');

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        await pool.query(`
            CREATE INDEX IF NOT EXISTS idx_tests_subject_id ON tests(subject_id);
            CREATE INDEX IF NOT EXISTS idx_tests_category_id ON tests(category_id);
            CREATE INDEX IF NOT EXISTS idx_tests_subcategory_id ON tests(subcategory_id);
            CREATE INDEX IF NOT EXISTS idx_resources_subject_id ON resources(subject_id);
            CREATE INDEX IF NOT EXISTS idx_resources_category_id ON resources(category_id);
            CREATE INDEX IF NOT EXISTS idx_test_results_user_id ON test_results(user_id);
            CREATE INDEX IF NOT EXISTS idx_test_results_test_id ON test_results(test_id);
            CREATE INDEX IF NOT EXISTS idx_test_attempts_user_id ON test_attempts(user_id);
            CREATE INDEX IF NOT EXISTS idx_test_attempts_test_id ON test_attempts(test_id);
            CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id ON subscriptions(user_id);
            CREATE INDEX IF NOT EXISTS idx_user_favorites_user_id ON user_favorites(user_id);
            CREATE INDEX IF NOT EXISTS idx_user_bans_user_id ON user_bans(user_id);
            CREATE INDEX IF NOT EXISTS idx_user_bans_is_active ON user_bans(is_active);
            CREATE INDEX IF NOT EXISTS idx_user_achievements_user_id ON user_achievements(user_id);
        `);
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');

        console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

export async function seedDatabase() {
    console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        const subjectsCount = await pool.query('SELECT COUNT(*) FROM subjects');
        if (parseInt(subjectsCount.rows[0].count) > 0) {
            console.log('üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ');
            return true;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        const subjectsResult = await pool.query(`
            INSERT INTO subjects (name, description, icon, color) VALUES
            ('–ê–Ω–∞—Ç–æ–º–∏—è', '–ò–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–µ–Ω–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞', 'ü¶¥', '#e74c3c'),
            ('–§–∏–∑–∏–æ–ª–æ–≥–∏—è', '–ò–∑—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ä–≥–∞–Ω–∏–∑–º–∞', '‚ù§Ô∏è', '#3498db'),
            ('–ü–∞—Ç–æ–ª–æ–≥–∏—è', '–ò–∑—É—á–µ–Ω–∏–µ –±–æ–ª–µ–∑–Ω–µ–π', 'üî¨', '#9b59b6'),
            ('–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è', '–ò–∑—É—á–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤', 'üíä', '#2ecc71'),
            ('–•–∏—Ä—É—Ä–≥–∏—è', '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ', 'üè•', '#f39c12')
            RETURNING id
        `);
        console.log('‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ê–Ω–∞—Ç–æ–º–∏–∏
        await pool.query(`
            INSERT INTO categories (subject_id, name, description) VALUES
            (1, '–û–ø–æ—Ä–Ω–æ-–¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', '–ö–æ—Å—Ç–∏, –º—ã—à—Ü—ã, —Å—É—Å—Ç–∞–≤—ã'),
            (1, '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞', '–°–µ—Ä–¥—Ü–µ –∏ —Å–æ—Å—É–¥—ã'),
            (1, '–ù–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', '–ú–æ–∑–≥, –Ω–µ—Ä–≤—ã, —Ä–µ—Ñ–ª–µ–∫—Å—ã'),
            (2, '–ö—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ', '–†–∞–±–æ—Ç–∞ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤'),
            (2, '–î—ã—Ö–∞–Ω–∏–µ', '–õ–µ–≥–∫–∏–µ –∏ –≥–∞–∑–æ–æ–±–º–µ–Ω'),
            (3, '–í–æ—Å–ø–∞–ª–µ–Ω–∏–µ', '–ü—Ä–æ—Ü–µ—Å—Å—ã –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è'),
            (4, '–ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏', '–ü—Ä–æ—Ç–∏–≤–æ–º–∏–∫—Ä–æ–±–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã'),
            (5, '–û–±—â–∞—è —Ö–∏—Ä—É—Ä–≥–∏—è', '–û—Å–Ω–æ–≤—ã —Ö–∏—Ä—É—Ä–≥–∏–∏')
        `);
        console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await pool.query(`
            INSERT INTO subcategories (category_id, name, description) VALUES
            (1, '–ö–æ—Å—Ç–∏ –≤–µ—Ä—Ö–Ω–∏—Ö –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–µ–π', '–ê–Ω–∞—Ç–æ–º–∏—è –∫–æ—Å—Ç–µ–π —Ä—É–∫'),
            (1, '–ö–æ—Å—Ç–∏ –Ω–∏–∂–Ω–∏—Ö –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–µ–π', '–ê–Ω–∞—Ç–æ–º–∏—è –∫–æ—Å—Ç–µ–π –Ω–æ–≥'),
            (2, '–°—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞', '–ö–∞–º–µ—Ä—ã –∏ –∫–ª–∞–ø–∞–Ω—ã —Å–µ—Ä–¥—Ü–∞'),
            (3, '–ì–æ–ª–æ–≤–Ω–æ–π –º–æ–∑–≥', '–û—Ç–¥–µ–ª—ã –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞'),
            (4, '–ú–∞–ª—ã–π –∫—Ä—É–≥ –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è', '–õ–µ–≥–æ—á–Ω–æ–µ –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ'),
            (5, '–ú–µ—Ö–∞–Ω–∏–∑–º –¥—ã—Ö–∞–Ω–∏—è', '–í–¥–æ—Ö –∏ –≤—ã–¥–æ—Ö')
        `);
        console.log('‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
        const testResult = await pool.query(`
            INSERT INTO tests (subcategory_id, title, description, time_limit, difficulty_level) VALUES
            (1, '–ö–æ—Å—Ç–∏ –ø–ª–µ—á–µ–≤–æ–≥–æ –ø–æ—è—Å–∞', '–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ –∫–æ—Å—Ç–µ–π –ø–ª–µ—á–µ–≤–æ–≥–æ –ø–æ—è—Å–∞', 15, 'easy'),
            (3, '–ê–Ω–∞—Ç–æ–º–∏—è —Å–µ—Ä–¥—Ü–∞', '–û—Å–Ω–æ–≤—ã —Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ—Ä–¥—Ü–∞', 20, 'medium'),
            (4, '–û—Ç–¥–µ–ª—ã –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–∑–≥–∞', '–ó–Ω–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–∑–≥–∞', 25, 'hard')
            RETURNING id
        `);
        console.log('‚úÖ –¢–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        const questionResult = await pool.query(`
            INSERT INTO questions (test_id, question_text, question_type, explanation, points) VALUES
            (1, '–ö–∞–∫–∞—è –∫–æ—Å—Ç—å –ù–ï –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–ª–µ—á–µ–≤–æ–º—É –ø–æ—è—Å—É?', 'multiple_choice', '–ü–ª–µ—á–µ–≤–æ–π –ø–æ—è—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∫–ª—é—á–∏—Ü—ã –∏ –ª–æ–ø–∞—Ç–∫–∏', 1),
            (1, '–°–∫–æ–ª—å–∫–æ –∫–æ—Å—Ç–µ–π –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ –ø–ª–µ—á–µ–≤–æ–≥–æ –ø–æ—è—Å–∞?', 'multiple_choice', '–ö–ª—é—á–∏—Ü–∞ –∏ –ª–æ–ø–∞—Ç–∫–∞ - –≤—Å–µ–≥–æ 2 –∫–æ—Å—Ç–∏ —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã', 1)
            RETURNING id
        `);
        console.log('‚úÖ –í–æ–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        await pool.query(`
            INSERT INTO answers (question_id, answer_text, is_correct) VALUES
            (1, '–ö–ª—é—á–∏—Ü–∞', false),
            (1, '–õ–æ–ø–∞—Ç–∫–∞', false),
            (1, '–ü–ª–µ—á–µ–≤–∞—è –∫–æ—Å—Ç—å', true),
            (1, '–ê–∫—Ä–æ–º–∏–æ–Ω', false),
            (2, '1', false),
            (2, '2', true),
            (2, '3', false),
            (2, '4', false)
        `);
        console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await pool.query(`
            INSERT INTO resources (title, description, resource_type, subject_id, category_id, is_premium) VALUES
            ('–ê—Ç–ª–∞—Å –∞–Ω–∞—Ç–æ–º–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞', '–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞—Ç–ª–∞—Å —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏', 'article', 1, 1, false),
            ('–§–∏–∑–∏–æ–ª–æ–≥–∏—è –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è', '–ú–µ—Ö–∞–Ω–∏–∑–º—ã —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–¥—Ü–∞', 'video', 2, 4, true),
            ('–û—Å–Ω–æ–≤—ã –ø–∞—Ç–æ–ª–æ–≥–∏–∏', '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã', 'article', 3, 6, false),
            ('–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤', '–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤', 'reference', 4, 7, true)
        `);
        console.log('‚úÖ –†–µ—Å—É—Ä—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–µ—à–µ–º –ø–∞—Ä–æ–ª—è
        const bcrypt = require('bcrypt');
        const passwordHash = await bcrypt.hash('password', 10);
        
        await pool.query(`
            INSERT INTO users (email, password_hash, first_name, last_name, role, is_verified) VALUES
            ('admin@medlearn.com', $1, '–ê–¥–º–∏–Ω', '–°–∏—Å—Ç–µ–º—ã', 'admin', true),
            ('student@test.com', $1, '–°—Ç—É–¥–µ–Ω—Ç', '–¢–µ—Å—Ç–æ–≤', 'student', true),
            ('test@test.com', $1, '–¢–µ—Å—Ç–æ–≤—ã–π', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'student', true)
        `, [passwordHash]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ) —Å –ø–∞—Ä–æ–ª–µ–º "password"');

        console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}