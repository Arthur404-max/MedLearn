import express from 'express';
import bcrypt from 'bcrypt';
import { pool } from '../src/config/db';
import { authenticateToken } from '../middleware/auth';

const router = express.Router();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/profile', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    
    const result = await pool.query(
      'SELECT id, email, first_name, last_name, university, course, is_verified, email_notifications, study_reminders, created_at, role, is_premium FROM users WHERE id = $1',
      [userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/profile', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { firstName, lastName, university, course } = req.body;

    await pool.query(
      'UPDATE users SET first_name = $1, last_name = $2, university = $3, course = $4, updated_at = NOW() WHERE id = $5',
      [firstName, lastName, university, course, userId]
    );

    res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/stats', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
    const testsResult = await pool.query(
      'SELECT COUNT(*) as tests_taken, AVG(score) as average_score, MAX(score) as best_score FROM test_results WHERE user_id = $1',
      [userId]
    );

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ–±—É—á–µ–Ω–∏—è
    const studyDaysResult = await pool.query(
      'SELECT COUNT(DISTINCT DATE(created_at)) as study_days FROM test_results WHERE user_id = $1',
      [userId]
    );

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    const subjectsResult = await pool.query(
      `SELECT s.name as subject_name, COUNT(*) as tests_count, AVG(tr.score) as avg_score
       FROM test_results tr 
       JOIN tests t ON tr.test_id = t.id 
       JOIN subjects s ON t.subject_id = s.id 
       WHERE tr.user_id = $1 
       GROUP BY s.id, s.name 
       ORDER BY avg_score DESC`,
      [userId]
    );

    // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const lastActivityResult = await pool.query(
      'SELECT MAX(created_at) as last_activity FROM test_results WHERE user_id = $1',
      [userId]
    );

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    const weeklyResult = await pool.query(
      `SELECT DATE(created_at) as test_date, COUNT(*) as tests_count, AVG(score) as avg_score
       FROM test_results 
       WHERE user_id = $1 AND created_at >= NOW() - INTERVAL '7 days'
       GROUP BY DATE(created_at)
       ORDER BY test_date`,
      [userId]
    );

    // –°—Ç—Ä–∏–∫ (–¥–Ω–∏ –ø–æ–¥—Ä—è–¥ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é)
    const streakResult = await pool.query(
      `WITH daily_activity AS (
         SELECT DATE(created_at) as activity_date
         FROM test_results 
         WHERE user_id = $1
         GROUP BY DATE(created_at)
         ORDER BY DATE(created_at) DESC
       ), 
       streak_calc AS (
         SELECT activity_date,
                activity_date - ROW_NUMBER() OVER (ORDER BY activity_date DESC) * INTERVAL '1 day' as streak_group
         FROM daily_activity
       )
       SELECT COUNT(*) as current_streak
       FROM streak_calc
       WHERE streak_group = (SELECT MIN(streak_group) FROM streak_calc)`,
      [userId]
    );

    const testsCount = parseInt(testsResult.rows[0].tests_taken) || 0;
    const averageScore = parseFloat(testsResult.rows[0].average_score) || 0;
    const bestScore = parseFloat(testsResult.rows[0].best_score) || 0;
    const studyDays = parseInt(studyDaysResult.rows[0].study_days) || 0;
    const currentStreak = parseInt(streakResult.rows[0]?.current_streak) || 0;

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const achievements = [];
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
    if (testsCount >= 1) achievements.push({ icon: 'üéØ', name: '–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç', description: '–ü—Ä–æ—à–µ–ª –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç', category: 'tests' });
    if (testsCount >= 5) achievements.push({ icon: 'üìö', name: '–£—á–µ–Ω–∏–∫', description: '–ü—Ä–æ—à–µ–ª 5 —Ç–µ—Å—Ç–æ–≤', category: 'tests' });
    if (testsCount >= 10) achievements.push({ icon: 'üî•', name: '–ê–∫—Ç–∏–≤–∏—Å—Ç', description: '–ü—Ä–æ—à–µ–ª 10 —Ç–µ—Å—Ç–æ–≤', category: 'tests' });
    if (testsCount >= 25) achievements.push({ icon: '‚≠ê', name: '–ó–≤–µ–∑–¥–∞', description: '–ü—Ä–æ—à–µ–ª 25 —Ç–µ—Å—Ç–æ–≤', category: 'tests' });
    if (testsCount >= 50) achievements.push({ icon: 'üíé', name: '–≠–∫—Å–ø–µ—Ä—Ç', description: '–ü—Ä–æ—à–µ–ª 50 —Ç–µ—Å—Ç–æ–≤', category: 'tests' });
    if (testsCount >= 100) achievements.push({ icon: 'üëë', name: '–ú–∞—Å—Ç–µ—Ä', description: '–ü—Ä–æ—à–µ–ª 100 —Ç–µ—Å—Ç–æ–≤', category: 'tests' });

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ
    if (averageScore >= 60) achievements.push({ icon: '‚úÖ', name: '–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å', description: '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª 60%+', category: 'quality' });
    if (averageScore >= 70) achievements.push({ icon: 'üìà', name: '–•–æ—Ä–æ—à–∏—Å—Ç', description: '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª 70%+', category: 'quality' });
    if (averageScore >= 80) achievements.push({ icon: 'üèÜ', name: '–û—Ç–ª–∏—á–Ω–∏–∫', description: '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª 80%+', category: 'quality' });
    if (averageScore >= 90) achievements.push({ icon: 'üéì', name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', description: '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª 90%+', category: 'quality' });
    if (bestScore === 100) achievements.push({ icon: 'üíØ', name: '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç', description: '–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', category: 'quality' });

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ
    if (studyDays >= 3) achievements.push({ icon: 'üìÖ', name: '–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ', description: '–£—á–∏–ª—Å—è 3 –¥–Ω—è', category: 'consistency' });
    if (studyDays >= 7) achievements.push({ icon: 'üóìÔ∏è', name: '–ù–µ–¥–µ–ª—å–∫–∞', description: '–£—á–∏–ª—Å—è 7 –¥–Ω–µ–π', category: 'consistency' });
    if (studyDays >= 30) achievements.push({ icon: 'üìÜ', name: '–ú–µ—Å—è—Ü —É—á–µ–±—ã', description: '–£—á–∏–ª—Å—è 30 –¥–Ω–µ–π', category: 'consistency' });
    if (currentStreak >= 3) achievements.push({ icon: 'üî•', name: '–°—Ç—Ä–∏–∫ 3', description: '3 –¥–Ω—è –ø–æ–¥—Ä—è–¥', category: 'consistency' });
    if (currentStreak >= 7) achievements.push({ icon: 'üí™', name: '–°—Ç—Ä–∏–∫ 7', description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', category: 'consistency' });
    if (currentStreak >= 30) achievements.push({ icon: 'üöÄ', name: '–°—Ç—Ä–∏–∫ 30', description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', category: 'consistency' });

    const stats = {
      tests_taken: testsCount,
      average_score: averageScore,
      best_score: bestScore,
      study_days: studyDays,
      current_streak: currentStreak,
      achievements: achievements,
      subjects_stats: subjectsResult.rows,
      weekly_activity: weeklyResult.rows,
      last_activity: lastActivityResult.rows[0]?.last_activity,
      total_achievements: achievements.length
    };

    res.json(stats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
router.put('/password', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { currentPassword, newPassword } = req.body;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–µ—à –ø–∞—Ä–æ–ª—è
    const userResult = await pool.query(
      'SELECT password_hash FROM users WHERE id = $1',
      [userId]
    );

    if (userResult.rows.length === 0) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
    const isValidPassword = await bcrypt.compare(currentPassword, userResult.rows[0].password_hash);
    if (!isValidPassword) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' });
    }

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    const hashedNewPassword = await bcrypt.hash(newPassword, 10);
    await pool.query(
      'UPDATE users SET password_hash = $1, updated_at = NOW() WHERE id = $2',
      [hashedNewPassword, userId]
    );

    res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/settings', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { emailNotifications, studyReminders } = req.body;

    await pool.query(
      'UPDATE users SET email_notifications = $1, study_reminders = $2, updated_at = NOW() WHERE id = $3',
      [emailNotifications, studyReminders, userId]
    );

    res.json({ message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/activity', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const limit = parseInt(String(req.query.limit || '10'));
    const offset = parseInt(String(req.query.offset || '0'));

    const activityResult = await pool.query(
      `SELECT 
         tr.id,
         tr.score,
         tr.created_at,
         t.title as test_title,
         s.name as subject_name,
         s.icon as subject_icon,
         tr.time_spent
       FROM test_results tr
       JOIN tests t ON tr.test_id = t.id
       JOIN subjects s ON t.subject_id = s.id
       WHERE tr.user_id = $1
       ORDER BY tr.created_at DESC
       LIMIT $2 OFFSET $3`,
      [userId, limit, offset]
    );

    const totalResult = await pool.query(
      'SELECT COUNT(*) as total FROM test_results WHERE user_id = $1',
      [userId]
    );

    res.json({
      activities: activityResult.rows,
      total: parseInt(totalResult.rows[0].total),
      hasMore: parseInt(totalResult.rows[0].total) > offset + limit
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
router.get('/progress', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;

    const progressResult = await pool.query(
      `SELECT 
         s.id as subject_id,
         s.name as subject_name,
         s.icon as subject_icon,
         COUNT(tr.id) as tests_completed,
         AVG(tr.score) as average_score,
         MAX(tr.score) as best_score,
         MAX(tr.created_at) as last_test_date,
         COUNT(DISTINCT DATE(tr.created_at)) as active_days
       FROM subjects s
       LEFT JOIN tests t ON s.id = t.subject_id
       LEFT JOIN test_results tr ON t.id = tr.test_id AND tr.user_id = $1
       GROUP BY s.id, s.name, s.icon
       ORDER BY tests_completed DESC, average_score DESC`,
      [userId]
    );

    const progress = progressResult.rows.map(row => ({
      ...row,
      tests_completed: parseInt(row.tests_completed) || 0,
      average_score: parseFloat(row.average_score) || 0,
      best_score: parseFloat(row.best_score) || 0,
      active_days: parseInt(row.active_days) || 0,
      progress_level: getProgressLevel(parseInt(row.tests_completed) || 0, parseFloat(row.average_score) || 0)
    }));

    res.json(progress);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function getProgressLevel(testsCount: number, avgScore: number): string {
  if (testsCount === 0) return '–ù–µ –Ω–∞—á–∞—Ç';
  if (testsCount < 3) return '–ù–æ–≤–∏—á–æ–∫';
  if (testsCount < 10 || avgScore < 60) return '–ò–∑—É—á–∞—é—â–∏–π';
  if (testsCount < 20 || avgScore < 75) return '–ü—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π';
  if (testsCount < 50 || avgScore < 85) return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
  return '–ú–∞—Å—Ç–µ—Ä';
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
router.delete('/account', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await pool.query('DELETE FROM users WHERE id = $1', [userId]);

    res.json({ message: '–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;