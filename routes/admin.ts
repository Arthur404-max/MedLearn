import express from 'express';
import { pool } from '../src/config/db';
import { authenticateToken } from '../middleware/auth';
import { validateUser } from '../middleware/validateUser';

const router = express.Router();

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–î–ú–ï–¢–ê–ú–ò ===

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
router.post('/subjects', authenticateToken, validateUser, async (req, res) => {
    try {
        const { name, description, icon } = req.body;
        
        if (!name || !name.trim()) {
            return res.status(400).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const existingSubject = await pool.query('SELECT id FROM subjects WHERE LOWER(name) = LOWER($1)', [name.trim()]);
        if (existingSubject.rows.length > 0) {
            return res.status(400).json({ message: '–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }
        
        const result = await pool.query(
            'INSERT INTO subjects (name, description, icon) VALUES ($1, $2, $3) RETURNING id, name, description, icon',
            [name.trim(), description?.trim() || '', icon?.trim() || 'üìö']
        );
        
        res.json({ 
            message: '–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 
            subject: result.rows[0] 
        });
    } catch (error) {
        console.error('Error creating subject:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞' });
    }
});

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ===

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
router.post('/categories', authenticateToken, validateUser, async (req, res) => {
    try {
        const { subject_id, name, description } = req.body;
        
        if (!subject_id || !name || !name.trim()) {
            return res.status(400).json({ message: '–ü—Ä–µ–¥–º–µ—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const subjectCheck = await pool.query('SELECT id FROM subjects WHERE id = $1', [subject_id]);
        if (subjectCheck.rows.length === 0) {
            return res.status(400).json({ message: '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
        const existingCategory = await pool.query(
            'SELECT id FROM categories WHERE LOWER(name) = LOWER($1) AND subject_id = $2', 
            [name.trim(), subject_id]
        );
        if (existingCategory.rows.length > 0) {
            return res.status(400).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ' });
        }
        
        const result = await pool.query(
            'INSERT INTO categories (subject_id, name, description) VALUES ($1, $2, $3) RETURNING id, name',
            [subject_id, name.trim(), description?.trim() || '']
        );
        
        res.json({ 
            message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', 
            category: result.rows[0] 
        });
    } catch (error) {
        console.error('Error creating category:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
router.get('/categories', authenticateToken, validateUser, async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT c.id, c.name, c.description, c.created_at,
                   s.name as subject_name, s.id as subject_id
            FROM categories c
            JOIN subjects s ON c.subject_id = s.id
            ORDER BY s.name, c.name
        `);
        
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching categories:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π' });
    }
});

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ===

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
router.post('/subcategories', authenticateToken, validateUser, async (req, res) => {
    try {
        const { category_id, name, description } = req.body;
        
        if (!category_id || !name || !name.trim()) {
            return res.status(400).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const categoryCheck = await pool.query('SELECT id FROM categories WHERE id = $1', [category_id]);
        if (categoryCheck.rows.length === 0) {
            return res.status(400).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const existingSubcategory = await pool.query(
            'SELECT id FROM subcategories WHERE LOWER(name) = LOWER($1) AND category_id = $2', 
            [name.trim(), category_id]
        );
        if (existingSubcategory.rows.length > 0) {
            return res.status(400).json({ message: '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
        }
        
        const result = await pool.query(
            'INSERT INTO subcategories (category_id, name, description) VALUES ($1, $2, $3) RETURNING id, name',
            [category_id, name.trim(), description?.trim() || '']
        );
        
        res.json({ 
            message: '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', 
            subcategory: result.rows[0] 
        });
    } catch (error) {
        console.error('Error creating subcategory:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
    }
});

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–°–£–†–°–ê–ú–ò ===

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
router.post('/resources', authenticateToken, validateUser, async (req, res) => {
    try {
        const { title, description, content, resource_type, url, subject_id, category_id, is_premium } = req.body;
        
        const result = await pool.query(
            'INSERT INTO resources (title, description, content, resource_type, url, subject_id, category_id, is_premium) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *',
            [title, description, content, resource_type, url, subject_id, category_id, is_premium]
        );
        
        res.json({ message: '–†–µ—Å—É—Ä—Å —Å–æ–∑–¥–∞–Ω', resource: result.rows[0] });
    } catch (error) {
        console.error('Error creating resource:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞' });
    }
});

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢–ê–ú–ò ===

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
router.get('/tests/ping', (req, res) => {
    console.log('Tests ping endpoint hit');
    res.json({ message: 'Tests API is working', timestamp: new Date().toISOString() });
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
router.post('/tests', authenticateToken, validateUser, async (req, res) => {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        console.log('Creating test with data:', req.body);
        const { title, description, subject, category_id, subcategory_id, difficulty, time_limit, questions } = req.body;
        
        if (!title || !subject || !questions || questions.length === 0) {
            console.log('Validation failed:', { title, subject, questionsLength: questions?.length });
            return res.status(400).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–µ–¥–º–µ—Ç –∏ –≤–æ–ø—Ä–æ—Å—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        // –ù–∞—Ö–æ–¥–∏–º subject_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞
        let subject_id;
        if (typeof subject === 'string') {
            const subjectResult = await client.query('SELECT id FROM subjects WHERE name = $1', [subject]);
            if (subjectResult.rows.length === 0) {
                return res.status(400).json({ message: '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + subject });
            }
            subject_id = subjectResult.rows[0].id;
        } else {
            subject_id = subject;
        }
        
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω subject_id:', subject_id, '–¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:', subject);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç
        const testResult = await client.query(
            'INSERT INTO tests (title, description, subject_id, category_id, subcategory_id, difficulty_level, time_limit, is_published) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id',
            [title, description, subject_id, category_id, subcategory_id, difficulty || 'medium', time_limit || 30, true]
        );
        
        const testId = testResult.rows[0].id;
        console.log('‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω —Å ID:', testId);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        for (let i = 0; i < questions.length; i++) {
            const question = questions[i];
            
            const questionResult = await client.query(
                'INSERT INTO questions (test_id, question_text, question_type, explanation, points) VALUES ($1, $2, $3, $4, $5) RETURNING id',
                [testId, question.text, question.type || 'multiple_choice', question.explanation || '', question.points || 1]
            );
            
            const questionId = questionResult.rows[0].id;
            console.log('‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —Å ID:', questionId);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            if (question.options && question.options.length > 0) {
                for (let j = 0; j < question.options.length; j++) {
                    const option = question.options[j];
                    await client.query(
                        'INSERT INTO answers (question_id, answer_text, is_correct) VALUES ($1, $2, $3)',
                        [questionId, option.text, option.is_correct || false]
                    );
                }
                console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤:', question.options.length);
            }
        }
        
        await client.query('COMMIT');
        console.log('üéâ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω:', testId);
        
        res.json({ 
            message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 
            test: { id: testId, title, questionsCount: questions.length } 
        });
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('Error creating test:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞' });
    } finally {
        client.release();
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
router.get('/tests', async (req, res) => {
    try {
        console.log('GET /tests endpoint hit');
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const result = await pool.query('SELECT * FROM tests ORDER BY created_at DESC');
        
        console.log('Found tests:', result.rows.length);
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching tests:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤' });
    }
});

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/users', authenticateToken, validateUser, async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                u.id, u.email, u.first_name, u.last_name, u.role, 
                u.is_verified, u.is_premium, u.is_banned, u.banned_reason,
                u.banned_at, u.last_login, u.created_at,
                banned_by_user.email as banned_by_email
            FROM users u
            LEFT JOIN users banned_by_user ON u.banned_by = banned_by_user.id
            ORDER BY u.created_at DESC
        `);
        
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching users:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }
});

// –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/users/:id/ban', authenticateToken, validateUser, async (req, res) => {
    try {
        const { id } = req.params;
        const { reason } = req.body;
        const adminId = req.user.id;
        
        if (!reason) {
            return res.status(400).json({ message: '–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' });
        }
        
        const result = await pool.query(`
            UPDATE users 
            SET is_banned = true, banned_reason = $1, banned_at = CURRENT_TIMESTAMP, banned_by = $2, updated_at = CURRENT_TIMESTAMP
            WHERE id = $3 AND id != $2
            RETURNING id, email, first_name, last_name
        `, [reason, adminId, id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è' });
        }
        
        res.json({ 
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω', 
            user: result.rows[0] 
        });
    } catch (error) {
        console.error('Error banning user:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
});

// –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/users/:id/unban', authenticateToken, validateUser, async (req, res) => {
    try {
        const { id } = req.params;
        
        const result = await pool.query(`
            UPDATE users 
            SET is_banned = false, banned_reason = NULL, banned_at = NULL, banned_by = NULL, updated_at = CURRENT_TIMESTAMP
            WHERE id = $1
            RETURNING id, email, first_name, last_name
        `, [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json({ 
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω', 
            user: result.rows[0] 
        });
    } catch (error) {
        console.error('Error unbanning user:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
});

// –í—ã–¥–∞—á–∞/–æ—Ç–∑—ã–≤ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞
router.post('/users/:id/premium', authenticateToken, validateUser, async (req, res) => {
    try {
        const { id } = req.params;
        const { is_premium } = req.body;
        
        const result = await pool.query(`
            UPDATE users 
            SET is_premium = $1, updated_at = CURRENT_TIMESTAMP
            WHERE id = $2
            RETURNING id, email, first_name, last_name, is_premium
        `, [is_premium, id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json({ 
            message: is_premium ? '–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω' : '–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω', 
            user: result.rows[0] 
        });
    } catch (error) {
        console.error('Error updating premium status:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞' });
    }
});

// –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/users/:id/role', authenticateToken, validateUser, async (req, res) => {
    try {
        const { id } = req.params;
        const { role } = req.body;
        const adminId = req.user.id;
        
        if (!['student', 'teacher', 'admin'].includes(role)) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å' });
        }
        
        if (parseInt(id) === adminId && role !== 'admin') {
            return res.status(400).json({ message: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
        }
        
        const result = await pool.query(`
            UPDATE users 
            SET role = $1, updated_at = CURRENT_TIMESTAMP
            WHERE id = $2
            RETURNING id, email, first_name, last_name, role
        `, [role, id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json({ 
            message: '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞', 
            user: result.rows[0] 
        });
    } catch (error) {
        console.error('Error updating user role:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/users/:id', authenticateToken, validateUser, async (req, res) => {
    try {
        const { id } = req.params;
        const adminId = req.user.id;
        
        if (parseInt(id) === adminId) {
            return res.status(400).json({ message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' });
        }
        
        const result = await pool.query(`
            DELETE FROM users 
            WHERE id = $1
            RETURNING id, email, first_name, last_name
        `, [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json({ 
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω', 
            user: result.rows[0] 
        });
    } catch (error) {
        console.error('Error deleting user:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/users/stats', authenticateToken, validateUser, async (req, res) => {
    try {
        const stats = await pool.query(`
            SELECT 
                COUNT(*) as total_users,
                COUNT(*) FILTER (WHERE is_verified = true) as verified_users,
                COUNT(*) FILTER (WHERE is_premium = true) as premium_users,
                COUNT(*) FILTER (WHERE is_banned = true) as banned_users,
                COUNT(*) FILTER (WHERE role = 'admin') as admin_users,
                COUNT(*) FILTER (WHERE role = 'teacher') as teacher_users,
                COUNT(*) FILTER (WHERE role = 'student') as student_users,
                COUNT(*) FILTER (WHERE created_at >= CURRENT_DATE - INTERVAL '7 days') as new_users_week,
                COUNT(*) FILTER (WHERE last_login >= CURRENT_DATE - INTERVAL '7 days') as active_users_week
            FROM users
        `);
        
        res.json(stats.rows[0]);
    } catch (error) {
        console.error('Error fetching user stats:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }
});

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢–ê–ú–ò ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
router.get('/tests', async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT 
                t.id, t.title, t.description, t.time_limit as duration,
                t.difficulty_level as category,
                s.name as subject,
                t.created_at,
                COUNT(q.id) as questions_count
            FROM tests t
            LEFT JOIN subjects s ON t.subject_id = s.id
            LEFT JOIN questions q ON t.id = q.test_id
            GROUP BY t.id, t.title, t.description, t.time_limit, t.difficulty_level, s.name, t.created_at
            ORDER BY t.created_at DESC
        `);
        
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching tests:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
router.get('/tests/:id', async (req, res) => {
    try {
        const { id } = req.params;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        const testResult = await pool.query(`
            SELECT 
                t.id, t.title, t.description, t.time_limit as duration,
                t.difficulty_level as category,
                s.name as subject,
                t.created_at
            FROM tests t
            LEFT JOIN subjects s ON t.subject_id = s.id
            WHERE t.id = $1
        `, [id]);
        
        if (testResult.rows.length === 0) {
            return res.status(404).json({ message: '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const test = testResult.rows[0];
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
        const questionsResult = await pool.query(`
            SELECT 
                q.id, q.question_text as text, q.explanation, q.question_type as type, q.points
            FROM questions q
            WHERE q.test_id = $1
            ORDER BY q.id
        `, [id]);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        const questions = [];
        for (const question of questionsResult.rows) {
            const answersResult = await pool.query(`
                SELECT answer_text as text, is_correct
                FROM answers
                WHERE question_id = $1
                ORDER BY id
            `, [question.id]);
            
            questions.push({
                ...question,
                options: answersResult.rows
            });
        }
        
        test.questions = questions;
        res.json(test);
        
    } catch (error) {
        console.error('Error fetching test:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞
router.get('/tests/:id/questions', async (req, res) => {
    try {
        const { id } = req.params;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
        const questionsResult = await pool.query(`
            SELECT 
                q.id, q.question_text as text, q.explanation, q.question_type as type, q.points
            FROM questions q
            WHERE q.test_id = $1
            ORDER BY q.id
        `, [id]);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        const questions = [];
        for (const question of questionsResult.rows) {
            const answersResult = await pool.query(`
                SELECT answer_text as text, is_correct
                FROM answers
                WHERE question_id = $1
                ORDER BY id
            `, [question.id]);
            
            questions.push({
                ...question,
                options: answersResult.rows
            });
        }
        
        res.json(questions);
        
    } catch (error) {
        console.error('Error fetching test questions:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞' });
    }
});



// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
router.put('/tests/:id', async (req, res) => {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        const { id } = req.params;
        const { title, subject, category, duration, description, questions } = req.body;
        
        if (!title || !questions || questions.length === 0) {
            return res.status(400).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –≤–æ–ø—Ä–æ—Å—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        // –ù–∞—Ö–æ–¥–∏–º subject_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞
        let subjectId = null;
        if (subject) {
            const subjectResult = await client.query('SELECT id FROM subjects WHERE name = $1', [subject]);
            if (subjectResult.rows.length > 0) {
                subjectId = subjectResult.rows[0].id;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç
        await client.query(`
            UPDATE tests 
            SET title = $1, description = $2, subject_id = $3, time_limit = $4, difficulty_level = $5
            WHERE id = $6
        `, [title, description || '', subjectId, duration || 30, category || 'medium', id]);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        await client.query('DELETE FROM answers WHERE question_id IN (SELECT id FROM questions WHERE test_id = $1)', [id]);
        await client.query('DELETE FROM questions WHERE test_id = $1', [id]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        for (const question of questions) {
            const questionResult = await client.query(`
                INSERT INTO questions (test_id, question_text, explanation, question_type, points)
                VALUES ($1, $2, $3, $4, $5)
                RETURNING id
            `, [id, question.text, question.explanation || '', question.type || 'multiple_choice', question.points || 1]);
            
            const questionId = questionResult.rows[0].id;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            for (const option of question.options) {
                await client.query(`
                    INSERT INTO answers (question_id, answer_text, is_correct)
                    VALUES ($1, $2, $3)
                `, [questionId, option.text, option.is_correct]);
            }
        }
        
        await client.query('COMMIT');
        res.json({ message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' });
        
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('Error updating test:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞' });
    } finally {
        client.release();
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
router.delete('/tests/:id', async (req, res) => {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');
        
        const { id } = req.params;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
        const testCheck = await client.query('SELECT title FROM tests WHERE id = $1', [id]);
        if (testCheck.rows.length === 0) {
            return res.status(404).json({ message: '–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
        await client.query('DELETE FROM answers WHERE question_id IN (SELECT id FROM questions WHERE test_id = $1)', [id]);
        
        // –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        await client.query('DELETE FROM questions WHERE test_id = $1', [id]);
        
        // –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        await client.query('DELETE FROM test_results WHERE test_id = $1', [id]);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç
        await client.query('DELETE FROM tests WHERE id = $1', [id]);
        
        await client.query('COMMIT');
        res.json({ message: '–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
        
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('Error deleting test:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞' });
    } finally {
        client.release();
    }
});

// =============================================================================
// –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–°–ù–û–í–ù–´–ú –°–ê–ô–¢–û–ú - –ù–û–í–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò
// =============================================================================

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤
const requireAdmin = async (req: any, res: any, next: any) => {
  try {
    const userId = req.user.id;
    
    const result = await pool.query(
      'SELECT role FROM users WHERE id = $1',
      [userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userRole = result.rows[0].role;
    if (userRole !== 'admin' && userRole !== 'teacher') {
      return res.status(403).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
    }

    next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
router.get('/stats', authenticateToken, validateUser, requireAdmin, async (req, res) => {
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersStats = await pool.query(`
      SELECT 
        COUNT(*) as total_users,
        COUNT(CASE WHEN is_verified = true THEN 1 END) as verified_users,
        COUNT(CASE WHEN role = 'admin' THEN 1 END) as admin_users,
        COUNT(CASE WHEN role = 'teacher' THEN 1 END) as teacher_users,
        COUNT(CASE WHEN created_at >= NOW() - INTERVAL '30 days' THEN 1 END) as new_users_month
      FROM users
    `);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
    const testsStats = await pool.query(`
      SELECT 
        COUNT(*) as total_tests,
        COUNT(CASE WHEN is_published = true THEN 1 END) as published_tests,
        COUNT(DISTINCT subject_id) as subjects_count
      FROM tests
    `);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    const resultsStats = await pool.query(`
      SELECT 
        COUNT(*) as total_attempts,
        AVG(score) as average_score,
        COUNT(CASE WHEN created_at >= NOW() - INTERVAL '7 days' THEN 1 END) as attempts_week,
        COUNT(CASE WHEN created_at >= NOW() - INTERVAL '30 days' THEN 1 END) as attempts_month
      FROM test_results
    `);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    const resourcesStats = await pool.query(`
      SELECT 
        COUNT(*) as total_resources,
        COUNT(CASE WHEN is_published = true THEN 1 END) as published_resources,
        SUM(views_count) as total_views
      FROM resources
    `);

    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    const dailyActivity = await pool.query(`
      SELECT 
        DATE(created_at) as activity_date,
        COUNT(*) as tests_taken,
        COUNT(DISTINCT user_id) as active_users
      FROM test_results 
      WHERE created_at >= NOW() - INTERVAL '7 days'
      GROUP BY DATE(created_at)
      ORDER BY activity_date
    `);

    const stats = {
      users: usersStats.rows[0],
      tests: testsStats.rows[0],
      results: resultsStats.rows[0],
      resources: resourcesStats.rows[0],
      daily_activity: dailyActivity.rows,
      generated_at: new Date().toISOString()
    };

    res.json(stats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
router.get('/users-management', authenticateToken, validateUser, requireAdmin, async (req, res) => {
  try {
    const page = parseInt(String(req.query.page || '1'));
    const limit = parseInt(String(req.query.limit || '20'));
    const offset = (page - 1) * limit;
    const search = String(req.query.search || '');

    let whereClause = '';
    let queryParams: any[] = [limit, offset];

    if (search) {
      whereClause = 'WHERE email ILIKE $3 OR first_name ILIKE $3 OR last_name ILIKE $3';
      queryParams.push(`%${search}%`);
    }

    const usersResult = await pool.query(`
      SELECT 
        id, email, first_name, last_name, role, is_verified, is_banned, 
        created_at, last_login, university, course, ban_reason, banned_at
      FROM users 
      ${whereClause}
      ORDER BY created_at DESC
      LIMIT $1 OFFSET $2
    `, queryParams);

    const totalResult = await pool.query(`
      SELECT COUNT(*) as total FROM users ${whereClause}
    `, search ? [`%${search}%`] : []);

    res.json({
      users: usersResult.rows,
      total: parseInt(totalResult.rows[0].total),
      page,
      pages: Math.ceil(parseInt(totalResult.rows[0].total) / limit)
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/users/:id/ban', authenticateToken, validateUser, requireAdmin, async (req, res) => {
  try {
    const userId = req.params.id;
    const { reason = '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª' } = req.body;
    const adminId = req.user.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if (userId === adminId.toString()) {
      return res.status(400).json({ message: '–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' });
    }

    await pool.query(`
      UPDATE users 
      SET is_banned = true, ban_reason = $1, banned_at = NOW(), banned_by = $2 
      WHERE id = $3
    `, [reason, adminId, userId]);

    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', userId, reason });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/users/:id/unban', authenticateToken, validateUser, requireAdmin, async (req, res) => {
  try {
    const userId = req.params.id;

    await pool.query(`
      UPDATE users 
      SET is_banned = false, ban_reason = NULL, banned_at = NULL, banned_by = NULL 
      WHERE id = $1
    `, [userId]);

    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', userId });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
router.get('/activity', authenticateToken, validateUser, requireAdmin, async (req, res) => {
  try {
    const limit = parseInt(String(req.query.limit || '50'));
    const offset = parseInt(String(req.query.offset || '0'));

    const activityResult = await pool.query(`
      SELECT 
        tr.id, tr.score, tr.created_at, tr.time_spent,
        u.email, u.first_name, u.last_name,
        t.title as test_title,
        s.name as subject_name
      FROM test_results tr
      JOIN users u ON tr.user_id = u.id
      JOIN tests t ON tr.test_id = t.id
      LEFT JOIN subjects s ON t.subject_id = s.id
      ORDER BY tr.created_at DESC
      LIMIT $1 OFFSET $2
    `, [limit, offset]);

    const totalResult = await pool.query('SELECT COUNT(*) as total FROM test_results');

    res.json({
      activities: activityResult.rows,
      total: parseInt(totalResult.rows[0].total),
      hasMore: parseInt(totalResult.rows[0].total) > offset + limit
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;