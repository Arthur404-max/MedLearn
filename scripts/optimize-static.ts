import fs from 'fs';
import path from 'path';
import { minify } from 'html-minifier-terser';

interface OptimizationStats {
    originalSize: number;
    optimizedSize: number;
    savings: number;
    savingsPercent: number;
}

class StaticOptimizer {
    private publicDir = path.join(process.cwd(), 'public');
    private optimizedDir = path.join(process.cwd(), 'public', 'optimized');

    async optimizeStaticAssets(): Promise<void> {
        console.log('üé® –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –°–¢–ê–¢–ò–ß–ï–°–ö–ò–• –†–ï–°–£–†–°–û–í');
        console.log('='.repeat(50));

        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (!fs.existsSync(this.optimizedDir)) {
            fs.mkdirSync(this.optimizedDir, { recursive: true });
        }

        const totalStats: OptimizationStats = {
            originalSize: 0,
            optimizedSize: 0,
            savings: 0,
            savingsPercent: 0
        };

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª—ã
        await this.optimizeHtmlFiles(totalStats);

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º CSS —Ñ–∞–π–ª—ã
        await this.optimizeCssFiles(totalStats);

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º JavaScript —Ñ–∞–π–ª—ã
        await this.optimizeJsFiles(totalStats);

        // –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        await this.createCacheManifest();

        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.printTotalStats(totalStats);
    }

    private async optimizeHtmlFiles(totalStats: OptimizationStats): Promise<void> {
        console.log('\nüìÑ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è HTML —Ñ–∞–π–ª–æ–≤...');

        const htmlFiles = this.findFiles(this.publicDir, '.html');
        
        for (const file of htmlFiles) {
            const content = fs.readFileSync(file, 'utf8');
            const originalSize = Buffer.byteLength(content, 'utf8');

            try {
                const minified = await minify(content, {
                    removeComments: true,
                    collapseWhitespace: true,
                    collapseBooleanAttributes: true,
                    removeAttributeQuotes: true,
                    removeRedundantAttributes: true,
                    useShortDoctype: true,
                    removeEmptyAttributes: true,
                    minifyJS: true,
                    minifyCSS: true
                });

                const optimizedSize = Buffer.byteLength(minified, 'utf8');
                const savings = originalSize - optimizedSize;
                const savingsPercent = (savings / originalSize) * 100;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                const fileName = path.basename(file);
                const optimizedPath = path.join(this.optimizedDir, fileName);
                fs.writeFileSync(optimizedPath, minified);

                console.log(`   ‚úÖ ${fileName}: ${originalSize} ‚Üí ${optimizedSize} bytes (-${savingsPercent.toFixed(1)}%)`);

                totalStats.originalSize += originalSize;
                totalStats.optimizedSize += optimizedSize;

            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${file}: ${(error as Error).message}`);
            }
        }
    }

    private async optimizeCssFiles(totalStats: OptimizationStats): Promise<void> {
        console.log('\nüé® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS —Ñ–∞–π–ª–æ–≤...');

        const cssFiles = this.findFiles(this.publicDir, '.css');
        
        for (const file of cssFiles) {
            const content = fs.readFileSync(file, 'utf8');
            const originalSize = Buffer.byteLength(content, 'utf8');

            // –ü—Ä–æ—Å—Ç–∞—è CSS –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)
            const minified = content
                .replace(/\/\*[\s\S]*?\*\//g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –æ–¥–Ω–∏–º
                .replace(/;\s*}/g, '}') // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –ø–µ—Ä–µ–¥ }
                .replace(/\s*{\s*/g, '{') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ {
                .replace(/;\s*/g, ';') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ ;
                .replace(/,\s*/g, ',') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ ,
                .trim();

            const optimizedSize = Buffer.byteLength(minified, 'utf8');
            const savings = originalSize - optimizedSize;
            const savingsPercent = (savings / originalSize) * 100;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            const fileName = path.basename(file);
            const optimizedPath = path.join(this.optimizedDir, fileName);
            fs.writeFileSync(optimizedPath, minified);

            console.log(`   ‚úÖ ${fileName}: ${originalSize} ‚Üí ${optimizedSize} bytes (-${savingsPercent.toFixed(1)}%)`);

            totalStats.originalSize += originalSize;
            totalStats.optimizedSize += optimizedSize;
        }
    }

    private async optimizeJsFiles(totalStats: OptimizationStats): Promise<void> {
        console.log('\n‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JavaScript —Ñ–∞–π–ª–æ–≤...');

        const jsFiles = this.findFiles(this.publicDir, '.js');
        
        for (const file of jsFiles) {
            const content = fs.readFileSync(file, 'utf8');
            const originalSize = Buffer.byteLength(content, 'utf8');

            // –ü—Ä–æ—Å—Ç–∞—è JS –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)
            const minified = content
                .replace(/\/\/.*$/gm, '') // –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                .replace(/\/\*[\s\S]*?\*\//g, '') // –£–¥–∞–ª—è–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –æ–¥–Ω–∏–º
                .replace(/\s*([{}();,])\s*/g, '$1') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
                .trim();

            const optimizedSize = Buffer.byteLength(minified, 'utf8');
            const savings = originalSize - optimizedSize;
            const savingsPercent = (savings / originalSize) * 100;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            const fileName = path.basename(file);
            const optimizedPath = path.join(this.optimizedDir, fileName);
            fs.writeFileSync(optimizedPath, optimizedSize > 0 ? minified : content);

            console.log(`   ‚úÖ ${fileName}: ${originalSize} ‚Üí ${optimizedSize} bytes (-${savingsPercent.toFixed(1)}%)`);

            totalStats.originalSize += originalSize;
            totalStats.optimizedSize += optimizedSize;
        }
    }

    private async createCacheManifest(): Promise<void> {
        console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...');

        const manifest = {
            version: Date.now(),
            assets: [] as Array<{
                path: string;
                hash: string;
                size: number;
                mimeType: string;
                cacheControl: string;
            }>
        };

        // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ public
        const allFiles = this.findAllFiles(this.publicDir);
        
        for (const file of allFiles) {
            const relativePath = path.relative(this.publicDir, file);
            const content = fs.readFileSync(file);
            const hash = require('crypto').createHash('md5').update(content).digest('hex');
            const ext = path.extname(file).toLowerCase();
            
            let mimeType = 'application/octet-stream';
            let cacheControl = 'public, max-age=3600';

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø—ã –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            switch (ext) {
                case '.html':
                    mimeType = 'text/html';
                    cacheControl = 'public, max-age=300'; // 5 –º–∏–Ω—É—Ç
                    break;
                case '.css':
                    mimeType = 'text/css';
                    cacheControl = 'public, max-age=31536000, immutable'; // 1 –≥–æ–¥
                    break;
                case '.js':
                    mimeType = 'application/javascript';
                    cacheControl = 'public, max-age=31536000, immutable'; // 1 –≥–æ–¥
                    break;
                case '.png':
                    mimeType = 'image/png';
                    cacheControl = 'public, max-age=31536000, immutable';
                    break;
                case '.jpg':
                case '.jpeg':
                    mimeType = 'image/jpeg';
                    cacheControl = 'public, max-age=31536000, immutable';
                    break;
                case '.svg':
                    mimeType = 'image/svg+xml';
                    cacheControl = 'public, max-age=31536000, immutable';
                    break;
                case '.woff':
                    mimeType = 'font/woff';
                    cacheControl = 'public, max-age=31536000, immutable';
                    break;
                case '.woff2':
                    mimeType = 'font/woff2';
                    cacheControl = 'public, max-age=31536000, immutable';
                    break;
            }

            manifest.assets.push({
                path: relativePath.replace(/\\/g, '/'),
                hash: hash.substring(0, 8),
                size: content.length,
                mimeType,
                cacheControl
            });
        }

        const manifestPath = path.join(this.optimizedDir, 'asset-manifest.json');
        fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));

        console.log(`   ‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: ${manifest.assets.length} —Ñ–∞–π–ª–æ–≤`);
        console.log(`   üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${manifestPath}`);
    }

    private findFiles(dir: string, extension: string): string[] {
        const files: string[] = [];
        
        const scanDir = (currentDir: string) => {
            const items = fs.readdirSync(currentDir, { withFileTypes: true });
            
            for (const item of items) {
                const fullPath = path.join(currentDir, item.name);
                
                if (item.isDirectory() && item.name !== 'optimized') {
                    scanDir(fullPath);
                } else if (item.isFile() && fullPath.endsWith(extension)) {
                    files.push(fullPath);
                }
            }
        };

        scanDir(dir);
        return files;
    }

    private findAllFiles(dir: string): string[] {
        const files: string[] = [];
        
        const scanDir = (currentDir: string) => {
            const items = fs.readdirSync(currentDir, { withFileTypes: true });
            
            for (const item of items) {
                const fullPath = path.join(currentDir, item.name);
                
                if (item.isDirectory() && item.name !== 'optimized') {
                    scanDir(fullPath);
                } else if (item.isFile()) {
                    files.push(fullPath);
                }
            }
        };

        scanDir(dir);
        return files;
    }

    private printTotalStats(stats: OptimizationStats): void {
        stats.savings = stats.originalSize - stats.optimizedSize;
        stats.savingsPercent = (stats.savings / stats.originalSize) * 100;

        console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
        console.log('='.repeat(50));
        console.log(`üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(stats.originalSize / 1024).toFixed(2)} KB`);
        console.log(`üóúÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: ${(stats.optimizedSize / 1024).toFixed(2)} KB`);
        console.log(`üíæ –≠–∫–æ–Ω–æ–º–∏—è: ${(stats.savings / 1024).toFixed(2)} KB (-${stats.savingsPercent.toFixed(1)}%)`);
        
        if (stats.savingsPercent > 30) {
            console.log('üéâ –û–¢–õ–ò–ß–ù–û! –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
        } else if (stats.savingsPercent > 15) {
            console.log('‚úÖ –•–û–†–û–®–û! –ó–∞–º–µ—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ');
        } else {
            console.log('üìù –§–∞–π–ª—ã —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }

        console.log('\nüöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
        console.log('   ‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü');
        console.log('   üì± –≠–∫–æ–Ω–æ–º–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞');
        console.log('   üåê –õ—É—á—à–∏–π SEO —Ä–µ–π—Ç–∏–Ω–≥');
        console.log('   üí∞ –°–Ω–∏–∂–µ–Ω–∏–µ CDN —Ä–∞—Å—Ö–æ–¥–æ–≤');
    }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ html-minifier-terser –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
async function ensureMinifier() {
    try {
        require('html-minifier-terser');
    } catch {
        console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ html-minifier-terser...');
        const { execSync } = require('child_process');
        execSync('npm install html-minifier-terser', { stdio: 'inherit' });
    }
}

// –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
async function main() {
    try {
        await ensureMinifier();
        
        const optimizer = new StaticOptimizer();
        await optimizer.optimizeStaticAssets();
        
        console.log('\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
        process.exit(1);
    }
}

main().catch(console.error);