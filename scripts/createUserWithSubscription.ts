import bcrypt from 'bcrypt';
import dotenv from 'dotenv';
import { pool } from '../src/config/db';

dotenv.config();

// –¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫
const SUBSCRIPTION_PLANS = {
    basic: {
        plan_type: 'basic',
        plan_name: '–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω',
        duration: 'semester',
        price: 299.00,
        features: {
            tests: true,
            resources: 'limited',
            ai_assistant: false,
            practice_modes: ['basic'],
            test_attempts: 50,
            resource_downloads: 10
        },
        duration_months: 6
    },
    premium: {
        plan_type: 'premium',
        plan_name: '–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω',
        duration: 'year',
        price: 999.00,
        features: {
            tests: true,
            resources: 'unlimited',
            ai_assistant: true,
            practice_modes: ['basic', 'advanced', 'simulation'],
            test_attempts: 'unlimited',
            resource_downloads: 'unlimited',
            priority_support: true
        },
        duration_months: 12
    },
    ai_assistant: {
        plan_type: 'ai_assistant',
        plan_name: '–ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
        duration: 'year',
        price: 1499.00,
        features: {
            tests: true,
            resources: 'unlimited',
            ai_assistant: true,
            ai_tutoring: true,
            personalized_learning: true,
            practice_modes: ['basic', 'advanced', 'simulation', 'ai_guided'],
            test_attempts: 'unlimited',
            resource_downloads: 'unlimited',
            priority_support: true,
            individual_consultation: true
        },
        duration_months: 12
    }
};

interface UserData {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    role?: string;
    subscriptionPlan?: keyof typeof SUBSCRIPTION_PLANS;
    isEmailVerified?: boolean;
}

async function createUserWithSubscription(userData: UserData) {
    const client = await pool.connect();
    
    try {
        console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π...');

        const {
            email,
            password,
            firstName,
            lastName,
            role = 'student',
            subscriptionPlan = 'basic',
            isEmailVerified = true
        } = userData;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if (!email || !email.includes('@')) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        if (!password || password.length < 8) {
            throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(password, 12);

        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await client.query('BEGIN');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await client.query(
            'SELECT id FROM users WHERE email = $1',
            [email]
        );
        
        if (existingUser.rows.length > 0) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResult = await client.query(`
            INSERT INTO users (
                email, 
                password_hash, 
                first_name, 
                last_name, 
                role,
                email_verified,
                is_verified,
                created_at,
                updated_at
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            RETURNING id, email, first_name, last_name, role, created_at
        `, [
            email, 
            hashedPassword, 
            firstName, 
            lastName, 
            role,
            isEmailVerified,
            isEmailVerified  // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–∞ –ø–æ–ª—è
        ]);

        const user = userResult.rows[0];
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:');
        console.log(`   üìß Email: ${user.email}`);
        console.log(`   üë§ –ò–º—è: ${user.first_name} ${user.last_name}`);
        console.log(`   üîë –ü–∞—Ä–æ–ª—å: ${password}`);
        console.log(`   üÜî ID: ${user.id}`);
        console.log(`   üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${user.created_at}`);
        console.log(`   ‚úâÔ∏è  Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${isEmailVerified ? '–î–∞' : '–ù–µ—Ç'}`);

        // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
        const plan = SUBSCRIPTION_PLANS[subscriptionPlan];
        if (!plan) {
            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptionPlan}`);
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        const startDate = new Date();
        const endDate = new Date();
        endDate.setMonth(endDate.getMonth() + plan.duration_months);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        const subscriptionResult = await client.query(`
            INSERT INTO subscriptions (
                user_id,
                plan_type,
                plan_name,
                duration,
                price,
                features,
                start_date,
                end_date,
                is_active,
                payment_status,
                created_at
            )
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, CURRENT_TIMESTAMP)
            RETURNING id, plan_name, end_date
        `, [
            user.id,
            plan.plan_type,
            plan.plan_name,
            plan.duration,
            plan.price,
            JSON.stringify(plan.features),
            startDate,
            endDate,
            true,
            'completed'
        ]);

        const subscription = subscriptionResult.rows[0];

        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:');
        console.log(`   üì¶ –ü–ª–∞–Ω: ${subscription.plan_name}`);
        console.log(`   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${plan.price} —Ä—É–±.`);
        console.log(`   üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${subscription.end_date}`);
        console.log(`   üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:`);
        
        // –í—ã–≤–æ–¥–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        Object.entries(plan.features).forEach(([key, value]) => {
            console.log(`      ‚Ä¢ ${key}: ${typeof value === 'object' ? JSON.stringify(value) : value}`);
        });

        // –ï—Å–ª–∏ –ø–ª–∞–Ω –ø—Ä–µ–º–∏—É–º –∏–ª–∏ –ò–ò, —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if (subscriptionPlan === 'premium' || subscriptionPlan === 'ai_assistant') {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
            await client.query(`
                UPDATE users 
                SET premium_user = true, premium_expires_at = $2 
                WHERE id = $1
            `, [user.id, endDate]);
            
            console.log('‚úÖ –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await client.query(`
            INSERT INTO user_stats (
                user_id,
                tests_completed,
                total_score,
                average_score,
                study_streak,
                total_study_time,
                created_at
            )
            VALUES ($1, 0, 0, 0, 0, 0, CURRENT_TIMESTAMP)
            ON CONFLICT (user_id) DO NOTHING
        `, [user.id]);

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"
        await client.query(`
            INSERT INTO user_achievements (user_id, achievement_id, earned_at)
            SELECT $1, id, CURRENT_TIMESTAMP
            FROM achievements 
            WHERE name = '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏'
            ON CONFLICT (user_id, achievement_id) DO NOTHING
        `, [user.id]);

        // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await client.query('COMMIT');

        console.log('\nüéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
        console.log(`   üåê URL: http://localhost:3000`);
        console.log(`   üìß Email: ${email}`);
        console.log(`   üîë –ü–∞—Ä–æ–ª—å: ${password}`);
        
        return {
            user,
            subscription,
            plan,
            loginCredentials: {
                email,
                password,
                url: 'http://localhost:3000'
            }
        };

    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    } finally {
        client.release();
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArguments(): UserData {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log(`
üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

–§–æ—Ä–º–∞—Ç:
node createUserWithSubscription.js <email> <password> <firstName> <lastName> [plan] [role]

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  email      - Email –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  password   - –ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)
  firstName  - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  lastName   - –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  plan       - –ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: basic, premium, ai_assistant (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: basic)
  role       - –†–æ–ª—å: student, teacher, admin (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: student)

–ü—Ä–∏–º–µ—Ä—ã:
  # –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
  npm run create-user-sub doctor@example.com SecurePass123 –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
  
  # –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω
  npm run create-user-sub doctor@example.com SecurePass123 –ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞ premium
  
  # –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
  npm run create-user-sub teacher@example.com TeacherPass123 –°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤ ai_assistant teacher

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:
  basic        - –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω (299 —Ä—É–±, 6 –º–µ—Å—è—Ü–µ–≤)
  premium      - –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω (999 —Ä—É–±, 12 –º–µ—Å—è—Ü–µ–≤) 
  ai_assistant - –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç (1499 —Ä—É–±, 12 –º–µ—Å—è—Ü–µ–≤)
        `);
        process.exit(0);
    }

    const [email, password, firstName, lastName, plan = 'basic', role = 'student'] = args;
    
    if (!email || !password || !firstName || !lastName) {
        throw new Error('–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: email, password, firstName, lastName');
    }

    if (!['basic', 'premium', 'ai_assistant'].includes(plan)) {
        throw new Error('–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: basic, premium –∏–ª–∏ ai_assistant');
    }

    if (!['student', 'teacher', 'admin'].includes(role)) {
        throw new Error('–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å: student, teacher –∏–ª–∏ admin');
    }

    return {
        email,
        password,
        firstName,
        lastName,
        subscriptionPlan: plan as keyof typeof SUBSCRIPTION_PLANS,
        role,
        isEmailVerified: true
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function createUserBatch(users: UserData[]) {
    console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –∏–∑ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
    
    const results = [];
    
    for (let i = 0; i < users.length; i++) {
        const user = users[i];
        console.log(`\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${i + 1}/${users.length}:`);
        
        try {
            const result = await createUserWithSubscription(user);
            results.push({ success: true, result });
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}:`, error);
            results.push({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
        }
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}`);
    console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${failed}`);
    console.log(`   üìã –í—Å–µ–≥–æ: ${users.length}`);
    
    return results;
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const userData = parseArguments();
    
    createUserWithSubscription(userData)
        .then((result) => {
            console.log('\nüéØ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
            process.exit(1);
        });
}

export { createUserWithSubscription, createUserBatch, SUBSCRIPTION_PLANS };