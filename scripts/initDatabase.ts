import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { pool } from '../src/config/db';

dotenv.config();

async function initializeDatabase() {
    const client = await pool.connect();

    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

        const sqlFilePath = path.resolve(__dirname, '../database/init.sql');
        if (!fs.existsSync(sqlFilePath)) {
            throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å—Ö–µ–º—ã: ${sqlFilePath}`);
        }

        const schemaSql = fs.readFileSync(sqlFilePath, 'utf8');
        if (!schemaSql.trim()) {
            throw new Error('–§–∞–π–ª init.sql –ø—É—Å—Ç–æ–π ‚Äî –Ω–µ—á–µ–≥–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å.');
        }

        await client.query(schemaSql);

        console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —Ñ–∞–π–ª—É init.sql');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    } finally {
        client.release();
    }
}

initializeDatabase()
    .then(() => {
        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });