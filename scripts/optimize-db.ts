#!/usr/bin/env ts-node

import { 
    createOptimalIndexes, 
    analyzeTableSizes, 
    cleanupOldData,
    monitoredQuery 
} from '../src/database/optimization';
import { pool, getPoolStats } from '../src/config/db';
import { logger } from '../src/config/logger';

async function optimizeDatabase() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        await pool.query('SELECT 1');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n');
        
        // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü...');
        await analyzeTableSizes();
        console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\n');
        
        // 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...');
        await createOptimalIndexes();
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã\n');
        
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PostgreSQL
        console.log('üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PostgreSQL...');
        await monitoredQuery('ANALYZE');
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n');
        
        // 5. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        const cleanup = process.argv.includes('--cleanup');
        if (cleanup) {
            console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            await cleanupOldData(90); // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
            console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n');
        }
        
        // 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:');
        const stats = getPoolStats();
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.totalCount}`);
        console.log(`   –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.idleCount}`);
        console.log(`   –û–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.waitingCount}`);
        console.log(`   –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.config.max}`);
        console.log(`   –ú–∏–Ω–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${stats.config.min}\n`);
        
        console.log('üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
        logger.info('Database optimization completed', {
            poolStats: stats,
            type: 'optimization_completed'
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
        logger.error('Database optimization failed', {
            error: (error as Error).message,
            type: 'optimization_error'
        });
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
async function benchmarkQueries() {
    console.log('‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...\n');
    
    const testQueries = [
        {
            name: '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email',
            query: 'SELECT * FROM users WHERE email = $1',
            params: ['test@test.com']
        },
        {
            name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É',
            query: 'SELECT * FROM tests WHERE subject_id = $1 AND is_active = true',
            params: [1]
        },
        {
            name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞',
            query: 'SELECT * FROM questions WHERE test_id = $1',
            params: [1]
        },
        {
            name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            query: `
                SELECT 
                    COUNT(*) as total_tests,
                    AVG(percentage) as avg_score
                FROM test_results 
                WHERE user_id = $1
            `,
            params: [1]
        },
        {
            name: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã',
            query: `
                SELECT 
                    t.title,
                    COUNT(tr.id) as attempts
                FROM tests t
                LEFT JOIN test_results tr ON t.id = tr.test_id
                WHERE t.is_active = true
                GROUP BY t.id, t.title
                ORDER BY attempts DESC
                LIMIT 10
            `,
            params: []
        }
    ];
    
    for (const test of testQueries) {
        const startTime = Date.now();
        
        try {
            const result = await pool.query(test.query, test.params as any[]);
            const duration = Date.now() - startTime;
            
            console.log(`‚úÖ ${test.name}: ${duration}ms (${result.rows.length} —Å—Ç—Ä–æ–∫)`);
            
            if (duration > 100) {
                console.log(`   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.`);
            }
            
        } catch (error) {
            console.log(`‚ùå ${test.name}: –û—à–∏–±–∫–∞ - ${(error as Error).message}`);
        }
    }
    
    console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log('   - –ó–∞–ø—Ä–æ—Å—ã > 100ms —Ç—Ä–µ–±—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
    console.log('   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ EXPLAIN ANALYZE –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞–Ω–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('   - –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PostgreSQL');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const command = process.argv[2];
    
    try {
        switch (command) {
            case 'optimize':
                await optimizeDatabase();
                break;
                
            case 'benchmark':
                await benchmarkQueries();
                break;
                
            case 'analyze':
                await analyzeTableSizes();
                break;
                
            case 'cleanup':
                const days = parseInt(process.argv[3]) || 90;
                await cleanupOldData(days);
                break;
                
            default:
                console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run db:[–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
  optimize   - –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
  benchmark  - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤  
  analyze    - –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  cleanup    - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–∏–º–µ—Ä—ã:
  npm run db:optimize
  npm run db:benchmark
  npm run db:cleanup

–§–ª–∞–≥–∏:
  --cleanup  - –í–∫–ª—é—á–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                `);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
        process.exit(1);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
if (require.main === module) {
    main().catch(console.error);
}