import dotenv from 'dotenv';
import { pool } from '../src/config/db';

dotenv.config();

interface BanOptions {
    userId: number;
    adminId: number;
    reason: string;
    duration?: number; // –≤ —á–∞—Å–∞—Ö, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - permanent
    isPermanent?: boolean;
}

interface UserInfo {
    id: number;
    email: string;
    first_name: string;
    last_name: string;
    role: string;
    is_banned: boolean;
    is_deleted: boolean;
    created_at: string;
    ban_reason?: string;
    banned_at?: string;
    banned_until?: string;
    last_login?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–ª–∏ ID
async function findUser(identifier: string | number): Promise<UserInfo | null> {
    const client = await pool.connect();
    
    try {
        let query: string;
        let params: any[];
        
        if (typeof identifier === 'number' || !isNaN(Number(identifier))) {
            query = 'SELECT * FROM users WHERE id = $1';
            params = [Number(identifier)];
        } else {
            query = 'SELECT * FROM users WHERE email = $1';
            params = [identifier];
        }
        
        const result = await client.query(query, params);
        return result.rows[0] || null;
    } finally {
        client.release();
    }
}

// –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function banUser(options: BanOptions): Promise<void> {
    const client = await pool.connect();
    
    try {
        await client.query('BEGIN');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await findUser(options.userId);
        if (!user) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${options.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        if (user.is_banned) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
        }
        
        if (user.is_deleted) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–¥–∞–ª–µ–Ω`);
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–∞–Ω–∞
        const bannedUntil = options.isPermanent ? null : 
            options.duration ? new Date(Date.now() + options.duration * 60 * 60 * 1000) : null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await client.query(`
            UPDATE users 
            SET is_banned = true,
                ban_reason = $2,
                banned_at = CURRENT_TIMESTAMP,
                banned_until = $3,
                banned_by = $4
            WHERE id = $1
        `, [options.userId, options.reason, bannedUntil, options.adminId]);
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤
        await client.query(`
            INSERT INTO user_bans (
                user_id, banned_by, ban_reason, banned_until, is_permanent, is_active
            ) VALUES ($1, $2, $3, $4, $5, true)
        `, [
            options.userId, 
            options.adminId, 
            options.reason, 
            bannedUntil, 
            options.isPermanent || false
        ]);
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await client.query(`
            UPDATE subscriptions 
            SET is_active = false 
            WHERE user_id = $1 AND is_active = true
        `, [options.userId]);
        
        await client.query('COMMIT');
        
        const banType = options.isPermanent ? '–ü–û–°–¢–û–Ø–ù–ù–û' : 
            options.duration ? `–Ω–∞ ${options.duration} —á–∞—Å–æ–≤` : '–ü–û–°–¢–û–Ø–ù–ù–û';
            
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:');
        console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name} (${user.email})`);
        console.log(`   ‚ö†Ô∏è  –ü—Ä–∏—á–∏–Ω–∞: ${options.reason}`);
        console.log(`   ‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${banType}`);
        if (bannedUntil) {
            console.log(`   üìÖ –î–æ: ${bannedUntil.toLocaleString('ru-RU')}`);
        }
        
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

// –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function unbanUser(userId: number, adminId: number, reason?: string): Promise<void> {
    const client = await pool.connect();
    
    try {
        await client.query('BEGIN');
        
        const user = await findUser(userId);
        if (!user) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        if (!user.is_banned) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
        }
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await client.query(`
            UPDATE users 
            SET is_banned = false,
                ban_reason = null,
                banned_at = null,
                banned_until = null,
                banned_by = null
            WHERE id = $1
        `, [userId]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤
        await client.query(`
            UPDATE user_bans 
            SET is_active = false,
                unbanned_at = CURRENT_TIMESTAMP,
                unbanned_by = $2,
                unban_reason = $3
            WHERE user_id = $1 AND is_active = true
        `, [userId, adminId, reason || '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º']);
        
        // –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏
        await client.query(`
            UPDATE subscriptions 
            SET is_active = true 
            WHERE user_id = $1 AND end_date > CURRENT_TIMESTAMP
        `, [userId]);
        
        await client.query('COMMIT');
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:');
        console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name} (${user.email})`);
        if (reason) {
            console.log(`   ‚ÑπÔ∏è  –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
        }
        
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

// –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π)
async function softDeleteUser(userId: number, adminId: number, reason?: string): Promise<void> {
    const client = await pool.connect();
    
    try {
        await client.query('BEGIN');
        
        const user = await findUser(userId);
        if (!user) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        if (user.is_deleted) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–∂–µ —É–¥–∞–ª–µ–Ω`);
        }
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
        await client.query(`
            UPDATE users 
            SET is_deleted = true,
                deleted_at = CURRENT_TIMESTAMP,
                deleted_by = $2,
                is_banned = false,
                email = email || '_deleted_' || EXTRACT(epoch FROM CURRENT_TIMESTAMP)::text
            WHERE id = $1
        `, [userId, adminId]);
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await client.query(`
            UPDATE subscriptions 
            SET is_active = false 
            WHERE user_id = $1
        `, [userId]);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã
        await client.query(`
            UPDATE user_bans 
            SET is_active = false,
                unbanned_at = CURRENT_TIMESTAMP,
                unbanned_by = $2,
                unban_reason = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω'
            WHERE user_id = $1 AND is_active = true
        `, [userId, adminId]);
        
        await client.query('COMMIT');
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ):');
        console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name} (${user.email})`);
        if (reason) {
            console.log(`   ‚ÑπÔ∏è  –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
        }
        console.log(`   üìù –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∞—É–¥–∏—Ç–∞`);
        
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

// –ñ–µ—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ –ë–î)
async function hardDeleteUser(userId: number, adminId: number): Promise<void> {
    const client = await pool.connect();
    
    try {
        await client.query('BEGIN');
        
        const user = await findUser(userId);
        if (!user) {
            throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∂–µ—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
        console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.last_name} (${user.email})`);
        
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CASCADE –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ª—É—á—à–µ —è–≤–Ω–æ)
        await client.query('DELETE FROM user_achievements WHERE user_id = $1', [userId]);
        await client.query('DELETE FROM user_favorites WHERE user_id = $1', [userId]);
        await client.query('DELETE FROM test_attempts WHERE user_id = $1', [userId]);
        await client.query('DELETE FROM user_stats WHERE user_id = $1', [userId]);
        await client.query('DELETE FROM payments WHERE user_id = $1', [userId]);
        await client.query('DELETE FROM subscriptions WHERE user_id = $1', [userId]);
        await client.query('DELETE FROM user_bans WHERE user_id = $1', [userId]);
        
        // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await client.query('DELETE FROM users WHERE id = $1', [userId]);
        
        await client.query('COMMIT');
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        console.log('‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é!');
        
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserStatus(identifier: string | number): Promise<void> {
    const user = await findUser(identifier);
    
    if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    console.log('üìã –°–¢–ê–¢–£–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
    console.log(`   üÜî ID: ${user.id}`);
    console.log(`   üìß Email: ${user.email}`);
    console.log(`   üë§ –ò–º—è: ${user.first_name} ${user.last_name}`);
    console.log(`   üî∞ –†–æ–ª—å: ${user.role}`);
    console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}`);
    
    if (user.is_deleted) {
        console.log('   ‚ùå –°–¢–ê–¢–£–°: –£–î–ê–õ–ï–ù');
        return;
    }
    
    if (user.is_banned) {
        console.log('   üö´ –°–¢–ê–¢–£–°: –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù');
        console.log(`   ‚ö†Ô∏è  –ü—Ä–∏—á–∏–Ω–∞: ${user.ban_reason}`);
        
        const client = await pool.connect();
        try {
            const banInfo = await client.query(`
                SELECT banned_until, is_permanent, banned_at 
                FROM user_bans 
                WHERE user_id = $1 AND is_active = true
                ORDER BY banned_at DESC 
                LIMIT 1
            `, [user.id]);
            
            if (banInfo.rows.length > 0) {
                const ban = banInfo.rows[0];
                console.log(`   üìÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${new Date(ban.banned_at).toLocaleString('ru-RU')}`);
                
                if (ban.is_permanent) {
                    console.log('   ‚è∞ –¢–∏–ø: –ü–û–°–¢–û–Ø–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê');
                } else if (ban.banned_until) {
                    const until = new Date(ban.banned_until);
                    const now = new Date();
                    
                    if (until > now) {
                        console.log(`   ‚è∞ –î–æ: ${until.toLocaleString('ru-RU')}`);
                        const hoursLeft = Math.ceil((until.getTime() - now.getTime()) / (1000 * 60 * 60));
                        console.log(`   ‚åõ –û—Å—Ç–∞–ª–æ—Å—å: ${hoursLeft} —á–∞—Å–æ–≤`);
                    } else {
                        console.log('   ‚è∞ –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)');
                    }
                }
            }
        } finally {
            client.release();
        }
    } else {
        console.log('   ‚úÖ –°–¢–ê–¢–£–°: –ê–ö–¢–ò–í–ï–ù');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    const client = await pool.connect();
    try {
        const subs = await client.query(`
            SELECT plan_name, is_active, end_date 
            FROM subscriptions 
            WHERE user_id = $1 
            ORDER BY created_at DESC 
            LIMIT 1
        `, [user.id]);
        
        if (subs.rows.length > 0) {
            const sub = subs.rows[0];
            console.log(`   üì¶ –ü–æ–¥–ø–∏—Å–∫–∞: ${sub.plan_name} (${sub.is_active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'})`);
            if (sub.end_date) {
                console.log(`   üìÖ –î–æ: ${new Date(sub.end_date).toLocaleString('ru-RU')}`);
            }
        }
    } finally {
        client.release();
    }
}

// –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function listAllUsers(showPasswords: boolean = false): Promise<void> {
    const client = await pool.connect();
    
    try {
        const result = await client.query(`
            SELECT u.id, u.email, u.first_name, u.last_name, u.role, 
                   u.is_banned, u.is_deleted, u.created_at, u.last_login,
                   s.plan_name, s.is_active as subscription_active, s.end_date
            FROM users u
            LEFT JOIN subscriptions s ON u.id = s.user_id 
                AND s.is_active = true 
                AND (s.end_date IS NULL OR s.end_date > CURRENT_TIMESTAMP)
            ORDER BY u.created_at DESC
        `);
        
        if (result.rows.length === 0) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        console.log('üë• –°–ü–ò–°–û–ö –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
        console.log('=' .repeat(100));
        console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.rows.length}\n`);
        
        result.rows.forEach((user, index) => {
            const statusEmoji = user.is_deleted ? 'üóëÔ∏è' : user.is_banned ? 'üö´' : '‚úÖ';
            const statusText = user.is_deleted ? '–£–î–ê–õ–ï–ù' : user.is_banned ? '–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù' : '–ê–ö–¢–ò–í–ï–ù';
            
            console.log(`${index + 1}. ${statusEmoji} ${user.first_name} ${user.last_name} (ID: ${user.id})`);
            console.log(`   üìß Email: ${user.email}`);
            console.log(`   üî∞ –†–æ–ª—å: ${user.role}`);
            console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${statusText}`);
            console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(user.created_at).toLocaleString('ru-RU')}`);
            
            if (user.last_login) {
                console.log(`   üîì –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${new Date(user.last_login).toLocaleString('ru-RU')}`);
            } else {
                console.log(`   üîì –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: –ù–∏–∫–æ–≥–¥–∞`);
            }
            
            if (user.plan_name) {
                const planStatus = user.subscription_active ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
                console.log(`   üì¶ –ü–æ–¥–ø–∏—Å–∫–∞: ${user.plan_name} (${planStatus})`);
                if (user.end_date) {
                    console.log(`   ‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(user.end_date).toLocaleString('ru-RU')}`);
                }
            } else {
                console.log(`   üì¶ –ü–æ–¥–ø–∏—Å–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            }
            
            console.log('');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ requested –∏ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ä–µ–¥–∞
        if (showPasswords) {
            console.log('\nüîê –í–ê–ñ–ù–û: –ü–∞—Ä–æ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ!');
            console.log('‚ö†Ô∏è  –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞—à–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏');
            console.log('üõ°Ô∏è  –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–∞—Ä–æ–ª–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è\n');
            
            console.log('üìù –ò–ó–í–ï–°–¢–ù–´–ï –¢–ï–°–¢–û–í–´–ï –ü–ê–†–û–õ–ò:');
            console.log('-' .repeat(50));
            console.log('student1@medlearn.ru     ‚Üí Student123!');
            console.log('student2@medlearn.ru     ‚Üí Student456!');
            console.log('teacher@medlearn.ru      ‚Üí Teacher789!');
            console.log('admin@medlearn.ru        ‚Üí Admin2024!');
            console.log('demo@medlearn.ru         ‚Üí Demo123!');
            console.log('doctor@medlearn.ru       ‚Üí DocPass123!');
            console.log('testbanv@example.com     ‚Üí TestPass123!');
            console.log('testban@example.com      ‚Üí TestPass123!');
            console.log('student3@medlearn.ru     ‚Üí Student323!');
        }
        
    } finally {
        client.release();
    }
}

// –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function listBannedUsers(): Promise<void> {
    const client = await pool.connect();
    
    try {
        const result = await client.query(`
            SELECT u.id, u.email, u.first_name, u.last_name, 
                   u.ban_reason, u.banned_at, ub.banned_until, ub.is_permanent
            FROM users u
            LEFT JOIN user_bans ub ON u.id = ub.user_id AND ub.is_active = true
            WHERE u.is_banned = true AND u.is_deleted = false
            ORDER BY u.banned_at DESC
        `);
        
        if (result.rows.length === 0) {
            console.log('‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç');
            return;
        }
        
        console.log('üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:');
        console.log('=' .repeat(80));
        
        result.rows.forEach((user, index) => {
            console.log(`\n${index + 1}. ${user.first_name} ${user.last_name} (ID: ${user.id})`);
            console.log(`   üìß Email: ${user.email}`);
            console.log(`   ‚ö†Ô∏è  –ü—Ä–∏—á–∏–Ω–∞: ${user.ban_reason}`);
            console.log(`   üìÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${new Date(user.banned_at).toLocaleString('ru-RU')}`);
            
            if (user.is_permanent) {
                console.log('   ‚è∞ –¢–∏–ø: –ü–û–°–¢–û–Ø–ù–ù–ê–Ø');
            } else if (user.banned_until) {
                const until = new Date(user.banned_until);
                const now = new Date();
                console.log(`   ‚è∞ –î–æ: ${until.toLocaleString('ru-RU')}`);
                
                if (until <= now) {
                    console.log('   ‚ö†Ô∏è  –°–†–û–ö –ò–°–¢–ï–ö - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞');
                } else {
                    const hoursLeft = Math.ceil((until.getTime() - now.getTime()) / (1000 * 60 * 60));
                    console.log(`   ‚åõ –û—Å—Ç–∞–ª–æ—Å—å: ${hoursLeft} —á–∞—Å–æ–≤`);
                }
            }
        });
        
    } finally {
        client.release();
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –±–∞–Ω–æ–≤
async function autoUnbanExpired(): Promise<void> {
    const client = await pool.connect();
    
    try {
        await client.query('BEGIN');
        
        const result = await client.query(`
            UPDATE users 
            SET is_banned = false, ban_reason = null, banned_at = null, 
                banned_until = null, banned_by = null
            WHERE is_banned = true 
            AND banned_until IS NOT NULL 
            AND banned_until <= CURRENT_TIMESTAMP
            RETURNING id, email, first_name, last_name
        `);
        
        if (result.rows.length > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤
            await client.query(`
                UPDATE user_bans 
                SET is_active = false, unbanned_at = CURRENT_TIMESTAMP,
                    unban_reason = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞'
                WHERE user_id = ANY($1::int[]) AND is_active = true
            `, [result.rows.map(u => u.id)]);
            
            // –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            for (const user of result.rows) {
                await client.query(`
                    UPDATE subscriptions 
                    SET is_active = true 
                    WHERE user_id = $1 AND end_date > CURRENT_TIMESTAMP
                `, [user.id]);
            }
            
            await client.query('COMMIT');
            
            console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${result.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
            result.rows.forEach(user => {
                console.log(`   ‚Ä¢ ${user.first_name} ${user.last_name} (${user.email})`);
            });
        } else {
            await client.query('COMMIT');
            console.log('‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        
    } catch (error) {
        await client.query('ROLLBACK');
        throw error;
    } finally {
        client.release();
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArguments() {
    const args = process.argv.slice(2);
    const action = args[0];
    
    if (!action) {
        console.log(`
üõ†Ô∏è  –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò - MedLearn Platform

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
  status <email|id>              - –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  list                          - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  list-passwords                - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Ä–æ–ª—è–º–∏ (—Ç–µ—Å—Ç–æ–≤—ã–µ)
  list-banned                   - –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  auto-unban                    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –±–∞–Ω–æ–≤

üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê:
  ban <email|id> <adminId> <reason> [hours]     - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ban-permanent <email|id> <adminId> <reason>   - –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
  unban <email|id> <adminId> [reason]          - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

‚ùå –£–î–ê–õ–ï–ù–ò–ï:
  soft-delete <email|id> <adminId> [reason]    - –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π)
  hard-delete <email|id> <adminId>             - –ñ–µ—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ –ë–î)

–ü–†–ò–ú–ï–†–´:
  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 24 —á–∞—Å–∞
  npm run manage-users ban user@example.com 1 "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª" 24
  
  # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
  npm run manage-users ban-permanent spam@example.com 1 "–°–ø–∞–º –∏ —Ä–µ–∫–ª–∞–º–∞"
  
  # –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
  npm run manage-users unban user@example.com 1 "–ò—Å–ø—Ä–∞–≤–∏–ª—Å—è"
  
  # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  npm run manage-users status user@example.com
  
  # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
  npm run manage-users soft-delete user@example.com 1 "–ü—Ä–æ—Å—å–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        `);
        process.exit(0);
    }
    
    return { action, args: args.slice(1) };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        const { action, args } = parseArguments();
        
        switch (action) {
            case 'status':
                if (args.length < 1) {
                    throw new Error('–£–∫–∞–∂–∏—Ç–µ email –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                }
                await getUserStatus(args[0]);
                break;
                
            case 'ban':
                if (args.length < 3) {
                    throw new Error('–§–æ—Ä–º–∞—Ç: ban <email|id> <adminId> <reason> [hours]');
                }
                const duration = args[3] ? parseInt(args[3]) : undefined;
                await banUser({
                    userId: isNaN(Number(args[0])) ? (await findUser(args[0]))?.id || 0 : Number(args[0]),
                    adminId: Number(args[1]),
                    reason: args[2],
                    duration,
                    isPermanent: !duration
                });
                break;
                
            case 'ban-permanent':
                if (args.length < 3) {
                    throw new Error('–§–æ—Ä–º–∞—Ç: ban-permanent <email|id> <adminId> <reason>');
                }
                await banUser({
                    userId: isNaN(Number(args[0])) ? (await findUser(args[0]))?.id || 0 : Number(args[0]),
                    adminId: Number(args[1]),
                    reason: args[2],
                    isPermanent: true
                });
                break;
                
            case 'unban':
                if (args.length < 2) {
                    throw new Error('–§–æ—Ä–º–∞—Ç: unban <email|id> <adminId> [reason]');
                }
                const userId = isNaN(Number(args[0])) ? (await findUser(args[0]))?.id || 0 : Number(args[0]);
                await unbanUser(userId, Number(args[1]), args[2]);
                break;
                
            case 'soft-delete':
                if (args.length < 2) {
                    throw new Error('–§–æ—Ä–º–∞—Ç: soft-delete <email|id> <adminId> [reason]');
                }
                const softUserId = isNaN(Number(args[0])) ? (await findUser(args[0]))?.id || 0 : Number(args[0]);
                await softDeleteUser(softUserId, Number(args[1]), args[2]);
                break;
                
            case 'hard-delete':
                if (args.length < 2) {
                    throw new Error('–í–ù–ò–ú–ê–ù–ò–ï! –§–æ—Ä–º–∞—Ç: hard-delete <email|id> <adminId>');
                }
                const hardUserId = isNaN(Number(args[0])) ? (await findUser(args[0]))?.id || 0 : Number(args[0]);
                
                console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ü–û–õ–ù–û–°–¢–¨–Æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!');
                console.log('   –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!');
                console.log('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å soft-delete –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ.');
                console.log('\n   –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ --confirm –≤ –∫–æ–Ω—Ü–µ –∫–æ–º–∞–Ω–¥—ã');
                
                if (!args[2] || args[2] !== '--confirm') {
                    console.log('\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ --confirm');
                    process.exit(1);
                }
                
                await hardDeleteUser(hardUserId, Number(args[1]));
                break;
                
            case 'list':
                await listAllUsers(false);
                break;
                
            case 'list-passwords':
                await listAllUsers(true);
                break;
                
            case 'list-banned':
                await listBannedUsers();
                break;
                
            case 'auto-unban':
                await autoUnbanExpired();
                break;
                
            default:
                throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${action}`);
        }
        
        console.log('\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞:', error instanceof Error ? error.message : error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main();
}

export { banUser, unbanUser, softDeleteUser, hardDeleteUser, getUserStatus, listAllUsers, listBannedUsers, autoUnbanExpired };