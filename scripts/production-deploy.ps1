# Production Deployment Script for MedLearn Platform
# –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è production

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("deploy", "stop", "restart", "status", "optimize", "backup", "redis", "pm2", "nginx", "cdn", "admin", "check")]
    [string]$Action,
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("development", "production")]
    [string]$Environment = "production",
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("start", "stop", "restart", "status")]
    [string]$SubAction = "start"
)

$ProjectRoot = "E:\ClioTest2"
$BackupDir = "E:\ClioTest2\backups"

function Write-Banner {
    param($Message)
    Write-Host ""
    Write-Host "=" * 60 -ForegroundColor Cyan
    Write-Host " $Message" -ForegroundColor White
    Write-Host "=" * 60 -ForegroundColor Cyan
}

function Test-Prerequisites {
    Write-Host "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..." -ForegroundColor Yellow
    
    $checks = @(
        @{ Name = "Node.js"; Command = "node --version" },
        @{ Name = "PM2"; Command = "pm2 --version" },
        @{ Name = "TypeScript"; Command = "npx tsc --version" },
        @{ Name = "Redis (WSL)"; Command = "wsl -d Ubuntu -- redis-cli ping" },
        @{ Name = "PostgreSQL"; Command = "pg_isready" }
    )
    
    $allPassed = $true
    
    foreach ($check in $checks) {
        try {
            $result = Invoke-Expression $check.Command 2>$null
            if ($LASTEXITCODE -eq 0) {
                Write-Host "   ‚úÖ $($check.Name): OK" -ForegroundColor Green
            } else {
                Write-Host "   ‚ùå $($check.Name): FAILED" -ForegroundColor Red
                $allPassed = $false
            }
        } catch {
            Write-Host "   ‚ö†Ô∏è $($check.Name): NOT AVAILABLE" -ForegroundColor Yellow
        }
    }
    
    return $allPassed
}

function Deploy-Production {
    Write-Banner "üöÄ PRODUCTION DEPLOYMENT - MEDLEARN PLATFORM"
    
    if (-not (Test-Prerequisites)) {
        Write-Host "‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º" -ForegroundColor Red
        return $false
    }
    
    Write-Host "üì¶ 1. –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..." -ForegroundColor Cyan
    Set-Location $ProjectRoot
    npm run build
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞" -ForegroundColor Red
        return $false
    }
    Write-Host "‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω" -ForegroundColor Green
    
    Write-Host "üé® 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..." -ForegroundColor Cyan
    npm run optimize-static
    Write-Host "‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã" -ForegroundColor Green
    
    Write-Host "üîÑ 3. –ó–∞–ø—É—Å–∫ Redis..." -ForegroundColor Cyan
    PowerShell -File "$ProjectRoot\scripts\redis-control.ps1" -Action start
    Write-Host "‚úÖ Redis –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Green
    
    Write-Host "‚ö° 4. –ó–∞–ø—É—Å–∫ PM2 –∫–ª–∞—Å—Ç–µ—Ä–∞..." -ForegroundColor Cyan
    if ($Environment -eq "production") {
        npm run pm2:start:prod
    } else {
        npm run pm2:start
    }
    Write-Host "‚úÖ PM2 –∫–ª–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Green
    
    Write-Host "üåê 5. –ó–∞–ø—É—Å–∫ Nginx Load Balancer..." -ForegroundColor Cyan
    PowerShell -ExecutionPolicy Bypass -File "$ProjectRoot\scripts\nginx-control.ps1" -Action start
    Write-Host "‚úÖ Nginx Load Balancer –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Green
    
    Write-Host "üìä 6. –ê—É–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..." -ForegroundColor Cyan
    Start-Sleep 5  # –î–∞–µ–º –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    npm run performance-audit
    
    Write-Banner "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
    Show-DeploymentInfo
    
    return $true
}

function Stop-Production {
    Write-Banner "üõë STOPPING PRODUCTION SERVICES"
    
    Write-Host "üåê –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx..." -ForegroundColor Yellow
    PowerShell -ExecutionPolicy Bypass -File "$ProjectRoot\scripts\nginx-control.ps1" -Action stop
    
    Write-Host "‚ö° –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2..." -ForegroundColor Yellow
    npm run pm2:stop
    
    Write-Host "üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis..." -ForegroundColor Yellow
    PowerShell -File "$ProjectRoot\scripts\redis-control.ps1" -Action stop
    
    Write-Host "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" -ForegroundColor Green
}

function Restart-Production {
    Write-Banner "üîÑ RESTARTING PRODUCTION SERVICES"
    Stop-Production
    Start-Sleep 3
    Deploy-Production
}

function Show-ProductionStatus {
    Write-Banner "üìä PRODUCTION STATUS DASHBOARD"
    
    Write-Host "üîÑ Redis Status:" -ForegroundColor Cyan
    PowerShell -File "$ProjectRoot\scripts\redis-control.ps1" -Action status
    
    Write-Host "`n‚ö° PM2 Cluster Status:" -ForegroundColor Cyan
    pm2 status
    
    Write-Host "`nüåê Nginx Load Balancer Status:" -ForegroundColor Cyan
    PowerShell -ExecutionPolicy Bypass -File "$ProjectRoot\scripts\nginx-control.ps1" -Action status
    
    Write-Host "`nüìà Quick Performance Test:" -ForegroundColor Cyan
    try {
        $startTime = Get-Date
        $response = Invoke-WebRequest -Uri "http://localhost/api/health" -TimeoutSec 10
        $endTime = Get-Date
        $responseTime = ($endTime - $startTime).TotalMilliseconds
        
        Write-Host "   ‚úÖ Load Balancer: ${responseTime}ms" -ForegroundColor Green
        
        $healthData = $response.Content | ConvertFrom-Json
        Write-Host "   üìä Cluster PID: $($healthData.cluster.pid)" -ForegroundColor Gray
        Write-Host "   üÜî Instance ID: $($healthData.cluster.instanceId)" -ForegroundColor Gray
        
    } catch {
        Write-Host "   ‚ùå Load Balancer: Offline" -ForegroundColor Red
    }
}

function Optimize-Production {
    Write-Banner "‚ö° PRODUCTION OPTIMIZATION"
    
    Write-Host "üé® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..." -ForegroundColor Cyan
    npm run optimize-static
    
    Write-Host "üóÑÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Cyan
    npm run db:optimize
    
    Write-Host "üíæ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞..." -ForegroundColor Cyan
    PowerShell -File "$ProjectRoot\scripts\redis-control.ps1" -Action flush
    
    Write-Host "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ PM2 (zero-downtime)..." -ForegroundColor Cyan
    npm run pm2:reload
    
    Write-Host "üåê –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Nginx..." -ForegroundColor Cyan
    PowerShell -ExecutionPolicy Bypass -File "$ProjectRoot\scripts\nginx-control.ps1" -Action reload
    
    Write-Host "‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" -ForegroundColor Green
}

function Backup-Production {
    Write-Banner "üíæ PRODUCTION BACKUP"
    
    $timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
    $backupPath = "$BackupDir\backup_$timestamp"
    
    if (-not (Test-Path $BackupDir)) {
        New-Item -Path $BackupDir -ItemType Directory -Force | Out-Null
    }
    
    New-Item -Path $backupPath -ItemType Directory -Force | Out-Null
    
    Write-Host "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Ñ–∞–π–ª–æ–≤..." -ForegroundColor Cyan
    $excludeDirs = @("node_modules", "dist", "logs", "temp", ".git")
    
    # –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    $importantFiles = @(
        "package.json", "package-lock.json", "tsconfig.json", 
        "ecosystem.config.json", ".env"
    )
    
    foreach ($file in $importantFiles) {
        if (Test-Path "$ProjectRoot\$file") {
            Copy-Item "$ProjectRoot\$file" "$backupPath\" -Force
        }
    }
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫
    $importantDirs = @("src", "routes", "middleware", "scripts", "public", "nginx")
    foreach ($dir in $importantDirs) {
        if (Test-Path "$ProjectRoot\$dir") {
            Copy-Item "$ProjectRoot\$dir" "$backupPath\" -Recurse -Force
        }
    }
    
    Write-Host "üóÑÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Cyan
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å pg_dump –µ—Å–ª–∏ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
    
    Write-Host "üíæ –≠–∫—Å–ø–æ—Ä—Ç Redis –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Cyan
    try {
        wsl -d Ubuntu -- redis-cli save
        $redisBackup = wsl -d Ubuntu -- find /var/lib/redis -name "dump.rdb" 2>/dev/null | Select-Object -First 1
        if ($redisBackup) {
            wsl -d Ubuntu -- cp $redisBackup /mnt/c/temp/redis_backup_$timestamp.rdb
        }
    } catch {
        Write-Host "   ‚ö†Ô∏è Redis backup –Ω–µ —É–¥–∞–ª—Å—è" -ForegroundColor Yellow
    }
    
    Write-Host "‚úÖ Backup —Å–æ–∑–¥–∞–Ω: $backupPath" -ForegroundColor Green
    Write-Host "üìä –†–∞–∑–º–µ—Ä backup: $((Get-ChildItem $backupPath -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB | ForEach {[math]::Round($_, 2)}) MB" -ForegroundColor Gray
}

function Show-DeploymentInfo {
    Write-Host ""
    Write-Host "üåê PRODUCTION ENDPOINTS:" -ForegroundColor Green
    Write-Host "   Main Site: http://localhost" -ForegroundColor White
    Write-Host "   API Health: http://localhost/api/health" -ForegroundColor White
    Write-Host "   Nginx Status: http://localhost/nginx_status" -ForegroundColor White
    Write-Host "   Direct PM2: http://localhost:3000" -ForegroundColor Gray
    Write-Host ""
    Write-Host "‚ö° MANAGEMENT COMMANDS:" -ForegroundColor Green
    Write-Host "   PM2 Monitor: pm2 monit" -ForegroundColor White
    Write-Host "   PM2 Logs: pm2 logs" -ForegroundColor White
    Write-Host "   Load Test: npm run nginx-test" -ForegroundColor White
    Write-Host "   Performance: npm run performance-audit" -ForegroundColor White
    Write-Host ""
    Write-Host "üéØ PRODUCTION READY FOR 100,000+ USERS!" -ForegroundColor Yellow -BackgroundColor Green
}

function Manage-Redis {
    Write-Host "üîÑ Redis Management..." -ForegroundColor Cyan
    switch ($SubAction) {
        "start" { 
            Write-Host "üöÄ –ó–∞–ø—É—Å–∫ Redis —á–µ—Ä–µ–∑ WSL..." -ForegroundColor Yellow
            wsl -d Ubuntu -- sudo service redis-server start
            Start-Sleep 2
            wsl -d Ubuntu -- redis-cli ping
        }
        "stop" { 
            Write-Host "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis..." -ForegroundColor Yellow
            wsl -d Ubuntu -- sudo service redis-server stop
        }
        "status" { 
            Write-Host "üìä –°—Ç–∞—Ç—É—Å Redis:" -ForegroundColor Yellow
            try {
                $result = wsl -d Ubuntu -- redis-cli ping
                Write-Host "‚úÖ Redis: $result" -ForegroundColor Green
            } catch {
                Write-Host "‚ùå Redis: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
            }
        }
        "restart" { 
            wsl -d Ubuntu -- sudo service redis-server restart
            Start-Sleep 2
            wsl -d Ubuntu -- redis-cli ping
        }
    }
}

function Manage-PM2 {
    Write-Host "‚ö° PM2 Management..." -ForegroundColor Cyan
    switch ($SubAction) {
        "start" { 
            Write-Host "üöÄ –ó–∞–ø—É—Å–∫ PM2 –∫–ª–∞—Å—Ç–µ—Ä–∞..." -ForegroundColor Yellow
            if ($Environment -eq "production") {
                npm run pm2:start:prod
            } else {
                npm run pm2:start
            }
        }
        "stop" { 
            Write-Host "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2..." -ForegroundColor Yellow
            pm2 stop all
            pm2 delete all
        }
        "status" { 
            Write-Host "üìä –°—Ç–∞—Ç—É—Å PM2:" -ForegroundColor Yellow
            pm2 list --no-color
        }
        "restart" { 
            Write-Host "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ PM2..." -ForegroundColor Yellow
            pm2 restart all
        }
    }
}

function Manage-Nginx {
    Write-Host "üåê Nginx Management..." -ForegroundColor Cyan
    switch ($SubAction) {
        "start" { 
            Write-Host "üöÄ –ó–∞–ø—É—Å–∫ Nginx..." -ForegroundColor Yellow
            PowerShell -ExecutionPolicy Bypass -File "$ProjectRoot\scripts\nginx-control.ps1" -Action start
        }
        "stop" { 
            Write-Host "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx..." -ForegroundColor Yellow
            nginx -s quit
        }
        "status" { 
            Write-Host "üìä –°—Ç–∞—Ç—É—Å Nginx:" -ForegroundColor Yellow
            if (Get-Process nginx -ErrorAction SilentlyContinue) {
                Write-Host "‚úÖ Nginx: –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Nginx: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Red
            }
        }
        "restart" { 
            Write-Host "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx..." -ForegroundColor Yellow
            nginx -s reload
        }
    }
}

function Manage-CDN {
    Write-Host "‚ö° CDN Management..." -ForegroundColor Cyan
    switch ($SubAction) {
        "start" { 
            Write-Host "üöÄ –ó–∞–ø—É—Å–∫ CDN —Å–µ—Ä–≤–µ—Ä–∞..." -ForegroundColor Yellow
            Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$ProjectRoot\cdn'; node cdn-server.js"
        }
        "stop" { 
            Write-Host "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ CDN..." -ForegroundColor Yellow
            $netstatOutput = netstat -ano | Select-String ":8080"
            if ($netstatOutput) {
                foreach ($line in $netstatOutput) {
                    $parts = $line -split '\s+'
                    $processId = $parts[-1]
                    if ($processId -match '^\d+$') {
                        Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue
                    }
                }
            }
        }
        "status" { 
            Write-Host "üìä –°—Ç–∞—Ç—É—Å CDN:" -ForegroundColor Yellow
            try {
                Invoke-WebRequest -Uri "http://localhost:8080" -TimeoutSec 3 | Out-Null
                Write-Host "‚úÖ CDN: –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080" -ForegroundColor Green
            } catch {
                Write-Host "‚ùå CDN: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
            }
        }
        "restart" {
            Write-Host "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ CDN..." -ForegroundColor Yellow
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            $netstatOutput = netstat -ano | Select-String ":8080"
            if ($netstatOutput) {
                foreach ($line in $netstatOutput) {
                    $parts = $line -split '\s+'
                    $processId = $parts[-1]
                    if ($processId -match '^\d+$') {
                        Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue
                    }
                }
            }
            Start-Sleep 2
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$ProjectRoot\cdn'; node cdn-server.js"
        }
    }
}

function Manage-Admin {
    Write-Host "üéõÔ∏è Admin Panel Management..." -ForegroundColor Cyan
    switch ($SubAction) {
        "start" { 
            Write-Host "üöÄ –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏..." -ForegroundColor Yellow
            Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$ProjectRoot\admin-panel'; node server.js"
        }
        "stop" { 
            Write-Host "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏..." -ForegroundColor Yellow
            $netstatOutput = netstat -ano | Select-String ":3002"
            if ($netstatOutput) {
                foreach ($line in $netstatOutput) {
                    $parts = $line -split '\s+'
                    $processId = $parts[-1]
                    if ($processId -match '^\d+$') {
                        Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue
                    }
                }
            }
        }
        "status" { 
            Write-Host "üìä –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:" -ForegroundColor Yellow
            try {
                Invoke-WebRequest -Uri "http://localhost:3002" -TimeoutSec 3 | Out-Null
                Write-Host "‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:3002" -ForegroundColor Green
            } catch {
                Write-Host "‚ùå –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" -ForegroundColor Red
            }
        }
        "restart" {
            Write-Host "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏..." -ForegroundColor Yellow
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            $netstatOutput = netstat -ano | Select-String ":3002"
            if ($netstatOutput) {
                foreach ($line in $netstatOutput) {
                    $parts = $line -split '\s+'
                    $processId = $parts[-1]
                    if ($processId -match '^\d+$') {
                        Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue
                    }
                }
            }
            Start-Sleep 2
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$ProjectRoot\admin-panel'; node server.js"
        }
    }
}

function Show-SystemCheck {
    Write-Banner "üîç –°–ò–°–¢–ï–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê"
    
    Write-Host "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:" -ForegroundColor Cyan
    
    # Redis
    try {
        wsl -d Ubuntu -- redis-cli ping | Out-Null
        Write-Host "‚úÖ Redis: —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Redis: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    }
    
    # PM2
    try {
        $processes = pm2 jlist | ConvertFrom-Json -ErrorAction SilentlyContinue
        if ($processes) {
            $online = ($processes | Where-Object {$_.pm2_env.status -eq 'online'}).Count
            Write-Host "‚úÖ PM2: $online –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ" -ForegroundColor Green
        } else {
            Write-Host "‚ùå PM2: –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå PM2: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    }
    
    # Nginx
    if (Get-Process nginx -ErrorAction SilentlyContinue) {
        Write-Host "‚úÖ Nginx: –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Nginx: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Red
    }
    
    # CDN
    try {
        Invoke-WebRequest -Uri "http://localhost:8080" -TimeoutSec 3 | Out-Null
        Write-Host "‚úÖ CDN: –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå CDN: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    }
    
    # Admin Panel
    try {
        Invoke-WebRequest -Uri "http://localhost:3002" -TimeoutSec 3 | Out-Null
        Write-Host "‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: –¥–æ—Å—Ç—É–ø–Ω–∞" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" -ForegroundColor Red
    }
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
    try {
        Invoke-WebRequest -Uri "http://localhost:3000" -TimeoutSec 3 | Out-Null
        Write-Host "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "üéØ –ü–û–†–¢–´:" -ForegroundColor Yellow
    Write-Host "  3000 - –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä"
    Write-Host "  3002 - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" 
    Write-Host "  8080 - CDN —Å–µ—Ä–≤–µ—Ä"
    Write-Host "  6379 - Redis (WSL)"
}

# Main execution
Set-Location $ProjectRoot

switch ($Action) {
    "deploy" { Deploy-Production }
    "stop" { Stop-Production }
    "restart" { Restart-Production }
    "redis" { Manage-Redis }
    "pm2" { Manage-PM2 }
    "nginx" { Manage-Nginx }
    "cdn" { Manage-CDN }
    "admin" { Manage-Admin }
    "check" { Show-SystemCheck }
    "status" { Show-ProductionStatus }
    "optimize" { Optimize-Production }
    "backup" { Backup-Production }
}