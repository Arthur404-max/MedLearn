import http from 'http';
import { performance } from 'perf_hooks';

interface PerformanceMetrics {
    dns: number;
    tcp: number;
    tls: number;
    ttfb: number; // Time to First Byte
    contentDownload: number;
    totalTime: number;
}

interface EndpointTest {
    url: string;
    name: string;
    expectedStatus: number;
    timeout: number;
}

class PerformanceMonitor {
    private endpoints: EndpointTest[] = [
        {
            url: 'http://localhost/api/health',
            name: 'Health Check (Nginx)',
            expectedStatus: 200,
            timeout: 5000
        },
        {
            url: 'http://localhost:3000/api/health',
            name: 'Health Check (Direct PM2)',
            expectedStatus: 200,
            timeout: 5000
        },
        {
            url: 'http://localhost:8080/cdn/health',
            name: 'CDN Health Check',
            expectedStatus: 200,
            timeout: 5000
        },
        {
            url: 'http://localhost/api/tests/subjects',
            name: 'API Subjects (Cached)',
            expectedStatus: 200,
            timeout: 10000
        },
        {
            url: 'http://localhost/',
            name: 'Main Page',
            expectedStatus: 200,
            timeout: 10000
        }
    ];

    async runPerformanceAudit(): Promise<void> {
        console.log('üîç –ê–£–î–ò–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´');
        console.log('='.repeat(60));
        console.log(`üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}`);
        console.log(`üñ•Ô∏è Platform: ${process.platform} ${process.arch}`);
        console.log(`üìä Node.js: ${process.version}`);
        console.log('');

        const results: Array<{
            endpoint: EndpointTest;
            metrics: PerformanceMetrics | null;
            error: string | null;
        }> = [];

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ endpoints
        for (const endpoint of this.endpoints) {
            console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${endpoint.name}`);
            
            try {
                const metrics = await this.measureEndpoint(endpoint);
                results.push({ endpoint, metrics, error: null });
                
                this.printEndpointResult(endpoint, metrics);
            } catch (error) {
                results.push({ 
                    endpoint, 
                    metrics: null, 
                    error: (error as Error).message 
                });
                
                console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`);
            }
            
            console.log('');
        }

        // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.analyzeResults(results);
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        this.provideOptimizationRecommendations(results);
    }

    private async measureEndpoint(endpoint: EndpointTest): Promise<PerformanceMetrics> {
        return new Promise((resolve, reject) => {
            const startTime = performance.now();
            let connectTime = 0;
            let firstByteTime = 0;
            
            const url = new URL(endpoint.url);
            
            const req = http.request({
                hostname: url.hostname,
                port: url.port || 80,
                path: url.pathname + url.search,
                method: 'GET',
                timeout: endpoint.timeout,
                headers: {
                    'User-Agent': 'MedLearn-Performance-Monitor/1.0',
                    'Accept': 'text/html,application/json,*/*',
                    'Connection': 'close'
                }
            }, (res) => {
                firstByteTime = performance.now();
                
                let data = '';
                let contentStartTime = performance.now();
                
                res.on('data', (chunk) => {
                    if (contentStartTime === firstByteTime) {
                        contentStartTime = performance.now();
                    }
                    data += chunk;
                });
                
                res.on('end', () => {
                    const endTime = performance.now();
                    
                    if (res.statusCode !== endpoint.expectedStatus) {
                        reject(new Error(`Expected status ${endpoint.expectedStatus}, got ${res.statusCode}`));
                        return;
                    }
                    
                    const metrics: PerformanceMetrics = {
                        dns: 0, // –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ DNS —Ä–µ–∑–æ–ª–≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π
                        tcp: connectTime - startTime,
                        tls: 0, // HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        ttfb: firstByteTime - startTime,
                        contentDownload: endTime - contentStartTime,
                        totalTime: endTime - startTime
                    };
                    
                    resolve(metrics);
                });
            });

            req.on('connect', () => {
                connectTime = performance.now();
            });

            req.on('error', (error) => {
                reject(error);
            });

            req.on('timeout', () => {
                req.destroy();
                reject(new Error(`Request timeout (${endpoint.timeout}ms)`));
            });

            req.end();
        });
    }

    private printEndpointResult(endpoint: EndpointTest, metrics: PerformanceMetrics): void {
        const getPerformanceColor = (time: number, thresholds: [number, number]): 'Green' | 'Yellow' | 'Red' => {
            if (time <= thresholds[0]) return 'Green';
            if (time <= thresholds[1]) return 'Yellow';
            return 'Red';
        };

        console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${endpoint.expectedStatus} OK`);
        console.log(`   ‚ö° TTFB: ${metrics.ttfb.toFixed(2)}ms`);
        console.log(`   üì¶ –ó–∞–≥—Ä—É–∑–∫–∞: ${metrics.contentDownload.toFixed(2)}ms`);
        console.log(`   üïê –û–±—â–µ–µ –≤—Ä–µ–º—è: ${metrics.totalTime.toFixed(2)}ms`);
        
        // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const ttfbColor = getPerformanceColor(metrics.ttfb, [100, 500]);
        const totalColor = getPerformanceColor(metrics.totalTime, [200, 1000]);
        
        console.log(`   üìä –û—Ü–µ–Ω–∫–∞ TTFB: ${this.getPerformanceEmoji(ttfbColor)} ${ttfbColor}`);
        console.log(`   üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${this.getPerformanceEmoji(totalColor)} ${totalColor}`);
    }

    private getPerformanceEmoji(color: string): string {
        switch (color) {
            case 'Green': return 'üü¢';
            case 'Yellow': return 'üü°';
            case 'Red': return 'üî¥';
            default: return '‚ö™';
        }
    }

    private analyzeResults(results: Array<{ endpoint: EndpointTest; metrics: PerformanceMetrics | null; error: string | null }>): void {
        console.log('üìà –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:');
        console.log('='.repeat(40));

        const successfulResults = results.filter(r => r.metrics !== null);
        const failedResults = results.filter(r => r.error !== null);

        if (failedResults.length > 0) {
            console.log(`‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints: ${failedResults.length}/${results.length}`);
            failedResults.forEach(result => {
                console.log(`   ‚Ä¢ ${result.endpoint.name}: ${result.error}`);
            });
            console.log('');
        }

        if (successfulResults.length === 0) {
            console.log('‚ùå –í—Å–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!');
            return;
        }

        // –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        const avgTtfb = successfulResults.reduce((sum, r) => sum + r.metrics!.ttfb, 0) / successfulResults.length;
        const avgTotal = successfulResults.reduce((sum, r) => sum + r.metrics!.totalTime, 0) / successfulResults.length;

        console.log(`üìä –°—Ä–µ–¥–Ω–∏–π TTFB: ${avgTtfb.toFixed(2)}ms`);
        console.log(`üìä –°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è: ${avgTotal.toFixed(2)}ms`);

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Nginx vs Direct
        const nginxResult = successfulResults.find(r => r.endpoint.name.includes('Nginx'));
        const directResult = successfulResults.find(r => r.endpoint.name.includes('Direct'));

        if (nginxResult && directResult) {
            const improvement = ((directResult.metrics!.ttfb - nginxResult.metrics!.ttfb) / directResult.metrics!.ttfb) * 100;
            console.log(`üîÑ Nginx vs Direct: ${improvement > 0 ? '+' : ''}${improvement.toFixed(1)}% —É–ª—É—á—à–µ–Ω–∏–µ TTFB`);
        }

        console.log('');
    }

    private provideOptimizationRecommendations(results: Array<{ endpoint: EndpointTest; metrics: PerformanceMetrics | null; error: string | null }>): void {
        console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
        console.log('='.repeat(40));

        const recommendations: string[] = [];

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
        const successfulResults = results.filter(r => r.metrics !== null);
        const slowEndpoints = successfulResults.filter(r => r.metrics!.ttfb > 200);

        if (slowEndpoints.length > 0) {
            recommendations.push('üêå –ï—Å—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ endpoints (TTFB > 200ms):');
            slowEndpoints.forEach(result => {
                recommendations.push(`   ‚Ä¢ ${result.endpoint.name}: ${result.metrics!.ttfb.toFixed(2)}ms`);
            });
            recommendations.push('   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CDN
        const cdnResult = results.find(r => r.endpoint.name.includes('CDN'));
        if (cdnResult?.error) {
            recommendations.push('üîó CDN –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            recommendations.push('   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç—å CDN —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        const cacheableEndpoint = results.find(r => r.endpoint.name.includes('Cached'));
        if (cacheableEndpoint?.metrics && cacheableEndpoint.metrics.ttfb > 50) {
            recommendations.push('üíæ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ');
            recommendations.push('   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Redis –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞');
        }

        // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.push('');
        recommendations.push('üöÄ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è production:');
        recommendations.push('   üì¶ –í–∫–ª—é—á–∏—Ç—å Gzip —Å–∂–∞—Ç–∏–µ');
        recommendations.push('   üóúÔ∏è –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã');
        recommendations.push('   üì± –ù–∞—Å—Ç—Ä–æ–∏—Ç—å HTTP/2');
        recommendations.push('   üîí –î–æ–±–∞–≤–∏—Ç—å SSL/TLS');
        recommendations.push('   üåê –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π CDN');
        recommendations.push('   üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ APM');

        recommendations.forEach(rec => console.log(rec));
    }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function main() {
    const monitor = new PerformanceMonitor();
    
    console.log('‚ö†Ô∏è –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—â–µ–Ω—ã –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã:');
    console.log('   1. Redis: .\\scripts\\redis-control.ps1 status');
    console.log('   2. PM2: npm run pm2:status');
    console.log('   3. Nginx: PowerShell -File .\\scripts\\nginx-control.ps1 -Action status');
    console.log('   4. CDN (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –ø–æ—Ä—Ç 8080');
    console.log('');

    await monitor.runPerformanceAudit();
}

main().catch(console.error);