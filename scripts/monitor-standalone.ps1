# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("start", "stop", "dashboard", "logs", "status")]
    [string]$Action
)

$LOG_DIR = "E:\ClioTest2\logs"
$MONITOR_PID_FILE = "E:\ClioTest2\.monitor.pid"

function Test-MonitoringRunning {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ PM2
    try {
        pm2 status 2>$null | Out-Null
        return $true
    } catch {
        return $false
    }
}

function Start-Monitoring {
    Write-Host "üìä –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..." -ForegroundColor Cyan
    
    if (Test-MonitoringRunning) {
        Write-Host "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!" -ForegroundColor Yellow
        Show-MonitoringStatus
        return
    }
    
    Write-Host "üîç –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤..." -ForegroundColor Gray
    if (!(Test-Path $LOG_DIR)) {
        New-Item -ItemType Directory -Path $LOG_DIR -Force | Out-Null
    }
    
    Write-Host "üöÄ –ó–∞–ø—É—Å–∫ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..." -ForegroundColor Gray
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    $monitorConfig = @{
        apps = @(
            @{
                name = "monitor-logger"
                script = "E:\ClioTest2\server.ts"
                interpreter = "ts-node"
                instances = 1
                exec_mode = "fork"
                env = @{
                    NODE_ENV = "development"
                    MONITOR_ONLY = "true"
                }
                log_file = "$LOG_DIR\monitor.log"
                error_file = "$LOG_DIR\monitor-error.log"
                out_file = "$LOG_DIR\monitor-out.log"
                merge_logs = $true
            }
        )
    } | ConvertTo-Json -Depth 3
    
    $configPath = "E:\ClioTest2\monitor.config.json"
    $monitorConfig | Out-File -FilePath $configPath -Encoding UTF8
    
    try {
        pm2 start $configPath
        Write-Host "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!" -ForegroundColor Green
        Write-Host "üìä Dashboard: npm run monitor:dashboard" -ForegroundColor White
        Write-Host "üìù –õ–æ–≥–∏: npm run monitor:logs" -ForegroundColor White
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        "monitor-active" | Out-File $MONITOR_PID_FILE -Encoding UTF8
        
    } catch {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $_" -ForegroundColor Red
    }
}

function Stop-Monitoring {
    Write-Host "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..." -ForegroundColor Cyan
    
    try {
        pm2 delete monitor-logger 2>$null
        Write-Host "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Yellow
    }
    
    # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
    if (Test-Path $MONITOR_PID_FILE) {
        Remove-Item $MONITOR_PID_FILE -Force
    }
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    $configPath = "E:\ClioTest2\monitor.config.json"
    if (Test-Path $configPath) {
        Remove-Item $configPath -Force
    }
    
    Write-Host "üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green
}

function Show-Dashboard {
    Write-Host "üöÄ –û—Ç–∫—Ä—ã—Ç–∏–µ PM2 Dashboard..." -ForegroundColor Cyan
    
    if (!(Test-MonitoringRunning)) {
        Write-Host "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run monitor:start" -ForegroundColor Red
        return
    }
    
    Write-Host "üìä –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ dashboard..." -ForegroundColor Green
    Write-Host "üí° –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C" -ForegroundColor Gray
    pm2 monit
}

function Show-Logs {
    Write-Host "üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..." -ForegroundColor Cyan
    
    if (!(Test-MonitoringRunning)) {
        Write-Host "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run monitor:start" -ForegroundColor Red
        return
    }
    
    Write-Host "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor Yellow
    Write-Host "  - pm2 logs                 # –í—Å–µ –ª–æ–≥–∏" -ForegroundColor Gray
    Write-Host "  - pm2 logs monitor-logger  # –õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞" -ForegroundColor Gray
    Write-Host "  - pm2 logs --lines 50      # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "üîÑ –ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤..." -ForegroundColor Green
    pm2 logs --lines 20
}

function Show-MonitoringStatus {
    Write-Host "üìä –°–¢–ê–¢–£–° –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê" -ForegroundColor Magenta
    Write-Host "=" * 35 -ForegroundColor Gray
    
    if (Test-MonitoringRunning) {
        Write-Host "‚úÖ PM2 Dashboard: –ê–ö–¢–ò–í–ï–ù" -ForegroundColor Green
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        Write-Host "üìà –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:" -ForegroundColor Cyan
        pm2 status
        
        Write-Host ""
        Write-Host "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" -ForegroundColor Yellow
        Write-Host "  - npm run monitor:dashboard  # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π dashboard" -ForegroundColor Gray
        Write-Host "  - npm run monitor:logs       # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤" -ForegroundColor Gray
        Write-Host "  - pm2 monit                  # –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ dashboard" -ForegroundColor Gray
        Write-Host "  - pm2 logs                   # –ü—Ä—è–º–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤" -ForegroundColor Gray
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        if (Test-Path $LOG_DIR) {
            $logFiles = Get-ChildItem $LOG_DIR -Filter "*.log" | Measure-Object
            Write-Host "üìÅ –§–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: $($logFiles.Count)" -ForegroundColor White
        }
        
    } else {
        Write-Host "‚ùå –°—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù" -ForegroundColor Red
        Write-Host "üí° –ó–∞–ø—É—Å–∫: npm run monitor:start" -ForegroundColor Gray
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        try {
            $mainProcesses = pm2 status 2>$null
            if ($mainProcesses -match "medlearn") {
                Write-Host "‚ÑπÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ - –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥" -ForegroundColor Blue
            } else {
                Write-Host "‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "‚ö†Ô∏è PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Yellow
        }
    }
    
    Write-Host "=" * 35 -ForegroundColor Gray
}

function Show-QuickStats {
    Write-Host "‚ö° –ë–´–°–¢–†–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê" -ForegroundColor Magenta
    Write-Host "=" * 25 -ForegroundColor Gray
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    $memory = Get-WmiObject -Class Win32_OperatingSystem
    $memoryUsed = [math]::Round(($memory.TotalVisibleMemorySize - $memory.FreePhysicalMemory) / $memory.TotalVisibleMemorySize * 100, 2)
    Write-Host "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: $memoryUsed%" -ForegroundColor $(if($memoryUsed -gt 80) {"Red"} elseif($memoryUsed -gt 60) {"Yellow"} else {"Green"})
    
    # PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã
    if (Test-MonitoringRunning) {
        try {
            $pm2List = pm2 jlist | ConvertFrom-Json
            $runningProcesses = ($pm2List | Where-Object { $_.pm2_env.status -eq "online" }).Count
            Write-Host "üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PM2: $runningProcesses" -ForegroundColor Green
        } catch {
            Write-Host "üîÑ PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ" -ForegroundColor Gray
        }
    }
    
    # –ü–æ—Ä—Ç—ã
    $ports = @(3000, 3002, 8080)
    foreach ($port in $ports) {
        $connection = Test-NetConnection -ComputerName localhost -Port $port -WarningAction SilentlyContinue -InformationLevel Quiet
        $status = if ($connection) { "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" } else { "üî¥ –ó–∞–∫—Ä—ã—Ç" }
        Write-Host "Port $port`: $status" -ForegroundColor $(if($connection) {"Green"} else {"Red"})
    }
    
    Write-Host "=" * 25 -ForegroundColor Gray
}

# –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
switch ($Action) {
    "start" { 
        Start-Monitoring 
        Show-QuickStats
    }
    "stop" { Stop-Monitoring }
    "dashboard" { Show-Dashboard }
    "logs" { Show-Logs }
    "status" { 
        Show-MonitoringStatus
        Show-QuickStats 
    }
}