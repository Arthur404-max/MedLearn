import http from 'http';
import { performance } from 'perf_hooks';

interface NginxTestResult extends TestResult {
    nginxEnabled: boolean;
    port: number;
}

interface TestResult {
    totalRequests: number;
    successfulRequests: number;
    failedRequests: number;
    averageResponseTime: number;
    minResponseTime: number;
    maxResponseTime: number;
    requestsPerSecond: number;
    testDuration: number;
}

class NginxLoadTester {
    private nginxPort = 80;
    private directPort = 3000;

    async runComparison(): Promise<void> {
        console.log('üèÅ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: Nginx vs Direct PM2');
        console.log('='.repeat(60));

        // –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PM2
        console.log('\nüéØ –¢–ï–°–¢ 1: –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PM2 (–ø–æ—Ä—Ç 3000)');
        const directResult = await this.runLoadTest(this.directPort, false);
        this.printResult(directResult);

        await new Promise(resolve => setTimeout(resolve, 3000));

        // –¢–µ—Å—Ç —á–µ—Ä–µ–∑ Nginx Load Balancer
        console.log('\nüåê –¢–ï–°–¢ 2: –ß–µ—Ä–µ–∑ Nginx Load Balancer (–ø–æ—Ä—Ç 80)');
        const nginxResult = await this.runLoadTest(this.nginxPort, true);
        this.printResult(nginxResult);

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.compareResults(directResult, nginxResult);
    }

    private async runLoadTest(port: number, nginxEnabled: boolean): Promise<NginxTestResult> {
        const concurrency = 50;
        const totalRequests = 500;
        const path = '/api/health';

        console.log(`   –ü–æ—Ä—Ç: ${port}`);
        console.log(`   –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${concurrency}`);
        console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${totalRequests}`);
        console.log(`   –≠–Ω–¥–ø–æ–∏–Ω—Ç: http://localhost:${port}${path}`);

        const startTime = performance.now();
        const responseTimes: number[] = [];
        const results: Promise<{ success: boolean; responseTime: number }>[] = [];

        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
        for (let i = 0; i < totalRequests; i++) {
            const requestPromise = this.makeRequest(port, path)
                .then(responseTime => ({ success: true, responseTime }))
                .catch(() => ({ success: false, responseTime: 0 }));
            
            results.push(requestPromise);

            // –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
            if ((i + 1) % concurrency === 0) {
                await Promise.allSettled(results.slice(-concurrency));
                await new Promise(resolve => setTimeout(resolve, 10)); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            }
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const allResults = await Promise.allSettled(results);
        const endTime = performance.now();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let successfulRequests = 0;
        let failedRequests = 0;

        allResults.forEach(result => {
            if (result.status === 'fulfilled') {
                const { success, responseTime } = result.value;
                if (success) {
                    successfulRequests++;
                    responseTimes.push(responseTime);
                } else {
                    failedRequests++;
                }
            } else {
                failedRequests++;
            }
        });

        const testDuration = endTime - startTime;
        const averageResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length || 0;
        const minResponseTime = Math.min(...responseTimes) || 0;
        const maxResponseTime = Math.max(...responseTimes) || 0;
        const requestsPerSecond = (successfulRequests / testDuration) * 1000;

        return {
            totalRequests,
            successfulRequests,
            failedRequests,
            averageResponseTime: Math.round(averageResponseTime * 100) / 100,
            minResponseTime: Math.round(minResponseTime * 100) / 100,
            maxResponseTime: Math.round(maxResponseTime * 100) / 100,
            requestsPerSecond: Math.round(requestsPerSecond * 100) / 100,
            testDuration: Math.round(testDuration),
            nginxEnabled,
            port
        };
    }

    private makeRequest(port: number, path: string): Promise<number> {
        return new Promise((resolve, reject) => {
            const startTime = performance.now();
            
            const req = http.request({
                hostname: 'localhost',
                port: port,
                path: path,
                method: 'GET',
                timeout: 10000,
                headers: {
                    'User-Agent': 'NginxLoadTester/1.0'
                }
            }, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    const endTime = performance.now();
                    const responseTime = endTime - startTime;
                    
                    if (res.statusCode === 200) {
                        resolve(responseTime);
                    } else {
                        reject(new Error(`HTTP ${res.statusCode}`));
                    }
                });
            });

            req.on('error', (error) => {
                reject(error);
            });

            req.on('timeout', () => {
                req.destroy();
                reject(new Error('Request timeout'));
            });

            req.end();
        });
    }

    private printResult(result: NginxTestResult) {
        const config = result.nginxEnabled ? 'üåê Nginx Load Balancer' : 'üéØ Direct PM2';
        
        console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ (${config}):`);
        console.log('-'.repeat(40));
        console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${result.successfulRequests}/${result.totalRequests} (${Math.round((result.successfulRequests/result.totalRequests)*100)}%)`);
        console.log(`‚ö° RPS: ${result.requestsPerSecond} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫`);
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${result.averageResponseTime}–º—Å (${result.minResponseTime}-${result.maxResponseTime}–º—Å)`);
        console.log(`üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${result.testDuration}–º—Å`);
    }

    private compareResults(direct: NginxTestResult, nginx: NginxTestResult) {
        console.log('\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:');
        console.log('='.repeat(60));
        
        const rpsImprovement = ((nginx.requestsPerSecond - direct.requestsPerSecond) / direct.requestsPerSecond) * 100;
        const responseTimeImprovement = ((direct.averageResponseTime - nginx.averageResponseTime) / direct.averageResponseTime) * 100;
        const successRateDirect = (direct.successfulRequests / direct.totalRequests) * 100;
        const successRateNginx = (nginx.successfulRequests / nginx.totalRequests) * 100;

        console.log(`üìä Requests per Second:`);
        console.log(`   Direct PM2: ${direct.requestsPerSecond} RPS`);
        console.log(`   Nginx LB:   ${nginx.requestsPerSecond} RPS`);
        console.log(`   –£–ª—É—á—à–µ–Ω–∏–µ:  ${rpsImprovement > 0 ? '+' : ''}${rpsImprovement.toFixed(1)}%`);
        
        console.log(`\n‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:`);
        console.log(`   Direct PM2: ${direct.averageResponseTime}–º—Å`);
        console.log(`   Nginx LB:   ${nginx.averageResponseTime}–º—Å`);
        console.log(`   –£–ª—É—á—à–µ–Ω–∏–µ:  ${responseTimeImprovement > 0 ? '+' : ''}${responseTimeImprovement.toFixed(1)}%`);
        
        console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤:`);
        console.log(`   Direct PM2: ${successRateDirect.toFixed(1)}%`);
        console.log(`   Nginx LB:   ${successRateNginx.toFixed(1)}%`);
        
        console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:');
        if (nginx.requestsPerSecond > direct.requestsPerSecond && successRateNginx >= successRateDirect) {
            console.log('üéâ Nginx Load Balancer –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –õ–£–ß–®–£–Æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!');
        } else if (nginx.requestsPerSecond > direct.requestsPerSecond * 0.95) {
            console.log('‚úÖ Nginx Load Balancer –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
        } else {
            console.log('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        }
        
        console.log('\nüîß –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Nginx Load Balancer:');
        console.log('   ‚úÖ SSL —Ç–µ—Ä–º–∏–Ω–∞—Ü–∏—è');
        console.log('   ‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã');
        console.log('   ‚úÖ Gzip —Å–∂–∞—Ç–∏–µ');
        console.log('   ‚úÖ Rate limiting');
        console.log('   ‚úÖ Health checks');
        console.log('   ‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
    const tester = new NginxLoadTester();
    
    console.log('‚ö†Ô∏è –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—â–µ–Ω—ã:');
    console.log('   1. PM2 –∫–ª–∞—Å—Ç–µ—Ä: npm run pm2:start');
    console.log('   2. Nginx: .\\scripts\\nginx-control.ps1 start');
    console.log('');
    
    await tester.runComparison();
}

main().catch(console.error);