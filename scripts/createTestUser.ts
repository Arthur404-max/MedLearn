import bcrypt from 'bcrypt';
import dotenv from 'dotenv';
import { pool } from '../src/config/db';

dotenv.config();

async function createTestUser() {
    const client = await pool.connect();
    
    try {
        console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

        const email = 'test@example.com';
        const password = 'password123';
        const hashedPassword = await bcrypt.hash(password, 10);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await client.query('SELECT id FROM users WHERE email = $1', [email]);
        
        if (existingUser.rows.length > 0) {
            console.log('‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const result = await client.query(`
            INSERT INTO users (email, password_hash, first_name, last_name, role)
            VALUES ($1, $2, $3, $4, $5)
            RETURNING id, email
        `, [email, hashedPassword, '–¢–µ—Å—Ç', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'student']);

        const user = result.rows[0];
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:');
        console.log(`   üìß Email: ${user.email}`);
        console.log(`   üîë –ü–∞—Ä–æ–ª—å: ${password}`);
        console.log(`   üÜî ID: ${user.id}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        await client.query(`
            INSERT INTO subscriptions (user_id, plan_type, plan_name, duration, price, features, end_date)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
        `, [
            user.id,
            'basic',
            '–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω',
            'semester',
            299.00,
            JSON.stringify({
                tests: true,
                resources: 'limited',
                ai_assistant: false,
                practice_modes: ['basic']
            }),
            new Date(Date.now() + 6 * 30 * 24 * 60 * 60 * 1000) // 6 –º–µ—Å—è—Ü–µ–≤
        ]);

        console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
    } finally {
        client.release();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
createTestUser()
    .then(() => {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });