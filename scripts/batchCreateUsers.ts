import { createUserWithSubscription, createUserBatch, SUBSCRIPTION_PLANS } from './createUserWithSubscription';

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_USERS = [
    {
        email: 'student1@medlearn.ru',
        password: 'Student123!',
        firstName: '–ê–ª–µ–∫—Å–µ–π',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        subscriptionPlan: 'basic' as const,
        role: 'student'
    },
    {
        email: 'student2@medlearn.ru',
        password: 'Student456!',
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ò–≤–∞–Ω–æ–≤–∞',
        subscriptionPlan: 'premium' as const,
        role: 'student'
    },
    {
        email: 'teacher@medlearn.ru',
        password: 'Teacher789!',
        firstName: '–î–º–∏—Ç—Ä–∏–π',
        lastName: '–°–∏–¥–æ—Ä–æ–≤',
        subscriptionPlan: 'ai_assistant' as const,
        role: 'teacher'
    },
    {
        email: 'admin@medlearn.ru',
        password: 'Admin2024!',
        firstName: '–ï–ª–µ–Ω–∞',
        lastName: '–ö–æ–∑–ª–æ–≤–∞',
        subscriptionPlan: 'ai_assistant' as const,
        role: 'admin'
    },
    {
        email: 'demo@medlearn.ru',
        password: 'Demo123!',
        firstName: '–î–µ–º–æ',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        subscriptionPlan: 'basic' as const,
        role: 'student'
    }
];

async function createTestUsers() {
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π MedLearn Platform...\n');
    
    try {
        const results = await createUserBatch(TEST_USERS);
        
        console.log('\nüìã –°–ü–ò–°–û–ö –°–û–ó–î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:');
        console.log('=' .repeat(80));
        
        TEST_USERS.forEach((user, index) => {
            const result = results[index];
            if (result.success) {
                const plan = SUBSCRIPTION_PLANS[user.subscriptionPlan];
                console.log(`
üë§ ${user.firstName} ${user.lastName} (${user.role.toUpperCase()})
   üìß Email: ${user.email}
   üîë –ü–∞—Ä–æ–ª—å: ${user.password}
   üì¶ –ü–ª–∞–Ω: ${plan.plan_name}
   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${plan.price} —Ä—É–±.
   ‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${plan.duration_months} –º–µ—Å—è—Ü–µ–≤
   ‚úÖ –°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
                `);
            } else {
                console.log(`
‚ùå ${user.firstName} ${user.lastName}
   üìß Email: ${user.email}
   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${result.error}
                `);
            }
        });
        
        console.log('\nüåê –î–û–°–¢–£–ü –ö –°–ò–°–¢–ï–ú–ï:');
        console.log('=' .repeat(50));
        console.log('üîó URL: http://localhost:3000');
        console.log('üìä –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:3002 (–ø–∞—Ä–æ–ª—å: admin2024)');
        
        console.log('\nüìñ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–õ–ê–ù–û–í:');
        console.log('=' .repeat(50));
        
        Object.entries(SUBSCRIPTION_PLANS).forEach(([key, plan]) => {
            console.log(`\nüì¶ ${plan.plan_name.toUpperCase()}:`);
            console.log(`   üí∞ –¶–µ–Ω–∞: ${plan.price} —Ä—É–±/${plan.duration_months} –º–µ—Å.`);
            console.log(`   üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:`);
            Object.entries(plan.features).forEach(([feature, value]) => {
                const displayValue = typeof value === 'object' ? 
                    Array.isArray(value) ? value.join(', ') : JSON.stringify(value)
                    : value.toString();
                console.log(`      ‚Ä¢ ${feature}: ${displayValue}`);
            });
        });
        
        console.log('\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
        console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run start-all');
        console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3000');
        console.log('3. –í–æ–π–¥–∏—Ç–µ —Å –ª—é–±—ã–º–∏ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π');
        console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏');
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        process.exit(1);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
async function createUsersByRole(role: string, count: number = 5) {
    console.log(`üéØ –°–æ–∑–¥–∞–Ω–∏–µ ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é: ${role}`);
    
    const users = [];
    const plans = ['basic', 'premium', 'ai_assistant'] as const;
    
    for (let i = 1; i <= count; i++) {
        const planIndex = (i - 1) % plans.length;
        const plan = plans[planIndex];
        
        users.push({
            email: `${role}${i}@medlearn.ru`,
            password: `${role.charAt(0).toUpperCase() + role.slice(1)}${i}23!`,
            firstName: `${role.charAt(0).toUpperCase() + role.slice(1)}`,
            lastName: `–¢–µ—Å—Ç–æ–≤—ã–π${i}`,
            subscriptionPlan: plan,
            role: role,
            isEmailVerified: true
        });
    }
    
    return await createUserBatch(users);
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
function parseCommand(): { action: string; role?: string; count?: number } {
    const args = process.argv.slice(2);
    const command = args[0];
    
    switch (command) {
        case 'test-users':
            return { action: 'test-users' };
            
        case 'by-role':
            const role: string = args[1] || 'student';
            const count: number = parseInt(args[2]) || 5;
            return { action: 'by-role', role, count };
            
        default:
            console.log(`
üöÄ –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π MedLearn Platform

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
   npm run create-batch test-users

2. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏:
   npm run create-batch by-role <role> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
   
   –ü—Ä–∏–º–µ—Ä—ã:
   npm run create-batch by-role student 10
   npm run create-batch by-role teacher 3
   npm run create-batch by-role admin 1

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: student, teacher, admin
–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: basic, premium, ai_assistant
            `);
            process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const { action, role, count } = parseCommand();
    
    switch (action) {
        case 'test-users':
            createTestUsers()
                .then(() => {
                    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!');
                    process.exit(0);
                })
                .catch((error) => {
                    console.error('üí• –û—à–∏–±–∫–∞:', error);
                    process.exit(1);
                });
            break;
            
        case 'by-role':
            if (role && count) {
                createUsersByRole(role, count)
                    .then((results) => {
                        const successful = results.filter(r => r.success).length;
                        console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ ${successful} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é ${role}`);
                        process.exit(0);
                    })
                    .catch((error) => {
                        console.error('üí• –û—à–∏–±–∫–∞:', error);
                        process.exit(1);
                    });
            }
            break;
    }
}

export { createTestUsers, createUsersByRole };