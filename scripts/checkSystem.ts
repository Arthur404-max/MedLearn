import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { pool } from '../src/config/db';

dotenv.config();

async function checkSystem() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...\n');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: OK');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        const tables = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name;
        `);
        
        const expectedTables = [
            'users', 'session', 'subjects', 'categories', 'subcategories',
            'tests', 'questions', 'answers', 'test_attempts', 'subscriptions',
            'resources', 'user_favorites', 'achievements', 'user_achievements'
        ];
        
        const existingTables = tables.rows.map(row => row.table_name);
        const missingTables = expectedTables.filter(table => !existingTables.includes(table));
        
        if (missingTables.length === 0) {
            console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: OK');
        } else {
            console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã:', missingTables.join(', '));
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        const dataCheck = await Promise.all([
            client.query('SELECT COUNT(*) FROM subjects'),
            client.query('SELECT COUNT(*) FROM categories'),
            client.query('SELECT COUNT(*) FROM tests'),
            client.query('SELECT COUNT(*) FROM questions'),
            client.query('SELECT COUNT(*) FROM resources'),
            client.query('SELECT COUNT(*) FROM achievements'),
        ]);

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:');
        console.log(`   –ü—Ä–µ–¥–º–µ—Ç—ã: ${dataCheck[0].rows[0].count}`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${dataCheck[1].rows[0].count}`);
        console.log(`   –¢–µ—Å—Ç—ã: ${dataCheck[2].rows[0].count}`);
        console.log(`   –í–æ–ø—Ä–æ—Å—ã: ${dataCheck[3].rows[0].count}`);
        console.log(`   –†–µ—Å—É—Ä—Å—ã: ${dataCheck[4].rows[0].count}`);
        console.log(`   –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${dataCheck[5].rows[0].count}`);

        client.release();
    } catch (error) {
        console.log('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: FAILED');
        if (error instanceof Error) {
            console.error('   –û—à–∏–±–∫–∞:', error.message);
        } else {
            console.error('   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');
    
    const criticalFiles = [
        'server.ts',
        'package.json',
        '.env',
        'public/index.html',
        'public/client.js',
        'public/styles.css',
        'routes/auth.ts',
        'routes/tests.ts',
        'routes/resources.ts',
        'routes/subscriptions.ts',
        'routes/stats.ts',
        'middleware/auth.ts',
        'middleware/validateUser.ts',
        'src/config/db.ts'
    ];

    criticalFiles.forEach(file => {
        const filePath = path.join(process.cwd(), file);
        if (fs.existsSync(filePath)) {
            console.log(`   ‚úÖ ${file}`);
        } else {
            console.log(`   ‚ùå ${file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:');
    const distPath = path.join(process.cwd(), 'dist');
    if (fs.existsSync(distPath)) {
        console.log('   ‚úÖ –ü–∞–ø–∫–∞ dist —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        
        const serverJsPath = path.join(distPath, 'server.js');
        if (fs.existsSync(serverJsPath)) {
            console.log('   ‚úÖ server.js —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.log('   ‚ùå server.js –Ω–µ –Ω–∞–π–¥–µ–Ω - –∑–∞–ø—É—Å—Ç–∏—Ç–µ npm run build');
        }
    } else {
        console.log('   ‚ùå –ü–∞–ø–∫–∞ dist –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –∑–∞–ø—É—Å—Ç–∏—Ç–µ npm run build');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    const requiredEnvVars = ['PGHOST', 'PGUSER', 'PGDATABASE', 'PGPASSWORD', 'JWT_SECRET'];
    
    requiredEnvVars.forEach(envVar => {
        if (process.env[envVar]) {
            console.log(`   ‚úÖ ${envVar}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        } else {
            console.log(`   ‚ùå ${envVar}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    console.log('\nüö™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:');
    const port = process.env.PORT || 3000;
    console.log(`   üîå –í–µ–±-—Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: ${port}`);
    
    const dbPort = process.env.PGPORT || 5432;
    console.log(`   üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–æ—Ä—Ç—É: ${dbPort}`);

    console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ');
    console.log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run build –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏');
    console.log('   4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    
    console.log('\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkSystem()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
        process.exit(1);
    });